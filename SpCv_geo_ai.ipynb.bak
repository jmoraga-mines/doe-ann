{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "cb222cf4",
   "metadata": {},
   "source": [
    "# Set-up Environment"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "46dcbe3d",
   "metadata": {},
   "source": [
    "## Initalize variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d7bd4712",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "File  :  brady_ai_stack.grd\n",
      "Bands :  7\n",
      "Samples :  2000\n",
      "Kernel  :  19  pixels per side\n",
      "Patience:  5\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    import tensorflow as tf\n",
    "    tf.keras.utils.set_random_seed(42)\n",
    "except: \n",
    "    import random\n",
    "    import numpy as np\n",
    "    import tensorflow as tf\n",
    "    random.seed(42)\n",
    "    np.random.seed(42)\n",
    "    tf.random.set_seed(42) # Tensorflow 2.9\n",
    "try:\n",
    "    from tensorflow import set_random_seed # Tensorflow 1.x\n",
    "    set_random_seed(42)\n",
    "except:\n",
    "    pass\n",
    "\n",
    "tif_file_name ='brady_ai_stack.grd'\n",
    "image_channels = 7 # Was 9\n",
    "#tif_file_name ='/store03/thesis/git/doe-som/brady_som_output.grd'\n",
    "#image_channels = 3\n",
    "\n",
    "print('File  : ', tif_file_name)\n",
    "print('Bands : ', image_channels)\n",
    "num_samples = 2000\n",
    "print('Samples : ', num_samples)\n",
    "kernel_pixels = 19\n",
    "print('Kernel  : ', kernel_pixels, ' pixels per side')\n",
    "my_patience = 5\n",
    "print('Patience: ', my_patience)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "70f02be2",
   "metadata": {},
   "source": [
    "## Load libraries and finish set-up"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3fc6074f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Num GPUs Available:  1\n"
     ]
    }
   ],
   "source": [
    "num_epochs = 150\n",
    "batch_size = 200\n",
    "\n",
    "BS=batch_size\n",
    "\n",
    "NUM_CLASSES = 2         # Default number of classes (\"Geothermal\", \"Non-Geothermal\")\n",
    "IMAGE_DIMS = (kernel_pixels, kernel_pixels, image_channels)\n",
    "BATCH_DIMS = (None, kernel_pixels, kernel_pixels, image_channels)\n",
    "KERNEL_PIXELS = kernel_pixels\n",
    "CHANNELS = image_channels\n",
    "\n",
    "num_classes = NUM_CLASSES\n",
    "augment_data = True\n",
    "\n",
    "import os\n",
    "os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' # Use this before loading tensorflow\n",
    "\n",
    "import tensorflow as tf\n",
    "print(\"Num GPUs Available: \", len(tf.config.list_physical_devices('GPU')))\n",
    "\n",
    "# Load libraries\n",
    "import gc\n",
    "import random\n",
    "from sklearn.preprocessing import LabelBinarizer\n",
    "\n",
    "from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\n",
    "from tensorflow.keras.optimizers import Adam, Nadam, Adadelta, Adagrad, Adamax, SGD\n",
    "from tensorflow.keras.utils import Sequence\n",
    "import numpy as np\n",
    "from pandas.core.dtypes.missing import isna\n",
    "import rasterio\n",
    "from sklearn.model_selection import GroupKFold\n",
    "from sklearn.cluster import MiniBatchKMeans, KMeans\n",
    "from sklearn.model_selection import BaseCrossValidator\n",
    "from abc import  ABC, abstractmethod, ABCMeta\n",
    "import pandas as pd\n",
    "import geopandas as gpd\n",
    "from tensorflow.keras.layers import AveragePooling2D, Input, Concatenate\n",
    "from tensorflow.keras.layers import Conv2D, MaxPooling2D\n",
    "from tensorflow.keras.layers import Activation, Flatten, Dropout, Dense\n",
    "from tensorflow.keras.models import Model\n",
    "from tensorflow.keras.regularizers import l2\n",
    "import keras\n",
    "from keras.wrappers.scikit_learn import KerasClassifier\n",
    "#from scikeras.wrappers import KerasClassifier # Can't install for some reason :(\n",
    "from sklearn.model_selection import cross_val_score\n",
    "import rasterio as rio\n",
    "from skimage.transform import rotate\n",
    "from matplotlib import pyplot"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9bc2735d",
   "metadata": {},
   "source": [
    "## Create image manipulation classes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "622b04d2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\nclass DataGenerator(Sequence): \\n    \\'Generates data for Keras\\'\\n    def __init__(self, data_set, labels, batch_size=BS,\\n            dim=(KERNEL_PIXELS,KERNEL_PIXELS,CHANNELS),\\n            n_channels=CHANNELS, n_classes=NUM_CLASSES,\\n            shuffle=True, augment_data=True):\\n        \\'Initialization\\'\\n        self.dim = dim\\n        self.batch_size = batch_size\\n        self.labels = labels\\n        self.data_set = data_set\\n        self.n_channels = n_channels\\n        self.n_classes = n_classes\\n        self.shuffle = shuffle\\n        self.augment_data = augment_data\\n        self.on_epoch_end()\\n\\n    def __len__(self):\\n        \\'Denotes the number of batches per epoch\\'\\n        return int(np.floor(len(self.data_set) / self.batch_size))\\n\\n    def __getitem__(self, index):\\n        \\'Generate one batch of data\\'\\n        # Generate indexes of the batch\\n        indexes = self.indexes[index*self.batch_size:(index+1)*self.batch_size]\\n        # Generate data\\n        X, y = self.__data_generation(indexes)\\n\\n        return X, y\\n\\n    def on_epoch_end(self):\\n        \\'Updates indexes after each epoch\\'\\n        self.indexes = np.arange(len(self.data_set))\\n        if self.shuffle == True:\\n            np.random.shuffle(self.indexes)\\n\\n    def __data_generation(self, list_IDs_temp):\\n        \\'Generates data containing batch_size samples\\' # X : (n_samples, *dim, n_channels)\\n        # Initialization\\n        X = np.empty((self.batch_size, *self.dim, self.n_channels))\\n        y = np.empty((self.batch_size, self.n_classes), dtype=int)\\n        # Generate data\\n        for i, ID in enumerate(list_IDs_temp):\\n            # Store sample\\n            image_raw = self.data_set[ID]\\n            if self.augment_data:\\n                image_raw = rotate(image_raw, angle=15*np.random.randint(6), mode=\\'symmetric\\')\\n                if np.random.randint(1):\\n                    image_raw = np.rot90( image_raw, 2 )\\n                if np.random.randint(1):\\n                    image_raw = np.fliplr( image_raw )\\n                if np.random.randint(1):\\n                    image_raw = np.flipud( image_raw )\\n            X[i,] = image_raw\\n            # Store class\\n            y[i] = self.labels[ID]\\n        return X, y\\n\\n\\nclass Kernel3D:\\n    def __init__(self, rows=3, cols=3, shape=\\'rect\\', radius=None, no_value=np.NaN):\\n        if shape == \\'circle\\':\\n            self.rows = 2*radius+1\\n            self.cols = 2*radius+1\\n            self.mask = self.round_mask(radius)\\n            self.row_buffer = radius\\n            self.col_buffer = radius\\n        else:\\n            self.rows = rows\\n            self.cols = cols\\n            self.mask = np.ones((rows, cols))\\n            self.row_buffer = int((rows-1)/2)\\n            self.col_buffer = int((cols-1)/2)\\n        self.mask = self.mask[np.newaxis, :, :]\\n        self.no_value = no_value\\n        assert((rows%2) == 1)\\n        assert((cols%2) == 1)\\n\\n    def round_mask(self, radius):\\n        diameter = 2*radius+1\\n        mask = np.empty((diameter, diameter,))\\n        mask[:] = self.no_value\\n        sq_radius = radius**2\\n        for i in range(diameter):\\n            for j in range(diameter):\\n                if ((i-radius)**2+(j-radius)**2) <= sq_radius:\\n                    mask[i, j] = 1\\n        return mask\\n\\n    def getSubset(self, matrix, row, column):\\n        m_rows = matrix.shape[1]\\n        assert (row >= self.row_buffer), f\"Out of bounds row {row}, from {m_rows}\"\\n        assert (row < (m_rows-self.row_buffer)), f\"Out of bounds row {row}, from {m_rows}\"\\n        m_cols = matrix.shape[2]\\n        assert((column >= self.col_buffer) and (column < (m_cols-self.col_buffer))), f\"Out of bounds column {column}, from {m_cols}\"\\n        row_start = row-self.row_buffer\\n        row_end = row+self.row_buffer\\n        column_start = column-self.col_buffer\\n        column_end = column+self.col_buffer\\n        small_matrix = matrix[:, row_start:row_end+1, column_start:column_end+1]\\n        return small_matrix*self.mask\\n\\n    def getPercentage(self, matrix, row, column):\\n        test_matrix = self.getSubset(matrix, column, row)\\n        return test_matrix.mean()\\n\\nclass GeoTiffSlicer(object):\\n    def __init__(self, land_matrix, kernel_rows=None, kernel_cols=None,\\n                 kernel_shape=\\'rect\\', kernel_radius=0, no_value = np.NaN):\\n        # (d, h, w) input tiff from rasterio\\n        if kernel_cols is None:\\n            kernel_cols = kernel_rows\\n        assert(kernel_cols < land_matrix.shape[2])\\n        assert(kernel_rows < land_matrix.shape[1])\\n        assert((kernel_shape == \\'rect\\') or (kernel_shape == \\'circle\\'))\\n        assert(kernel_radius>=0)\\n        if kernel_shape == \\'rect\\':\\n            self.kernel = Kernel3D(rows=kernel_rows, cols=kernel_cols)\\n        else:\\n            self.kernel = Kernel3D(radius=kernel_radius,\\n                                   shape=kernel_shape,\\n                                   no_value=no_value)\\n            kernel_rows = kernel_cols = 2*kernel_radius+1\\n        self.kernel_rows = kernel_rows\\n        self.kernel_cols = kernel_cols\\n        self.land_matrix = land_matrix\\n        self.land_matrix_channels, self.land_matrix_cols, self.land_matrix_rows = land_matrix.shape\\n        self.land_matrix_cols = land_matrix.shape[2]\\n        self.land_matrix_rows = land_matrix.shape[1]\\n        self.land_matrix_channels = land_matrix.shape[0]\\n        self.small_row_min = self.kernel.row_buffer\\n        self.small_row_max = self.land_matrix_rows - self.small_row_min\\n        self.small_column_min = self.kernel.col_buffer\\n        self.small_column_max = self.land_matrix_cols - self.small_column_min\\n\\n    def apply_mask(self, row, column):\\n        return self.kernel.getSubset(self.land_matrix, row=row, column=column)\\n\\n    def calculate(self):\\n        m1 = np.zeros_like(self.land_matrix, dtype=\\'float\\')\\n        for j in range(self.small_row_min, self.small_row_max):\\n            for i in range(self.small_column_min, self.small_column_max):\\n                m1[i, j] = self.kernel.getPercentage(self.land_matrix, column=i, row=j)\\n        return m1\\n'"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Helper class, generates data for keras\n",
    "from jigsaw.jigsaw import DataGenerator\n",
    "from jigsaw.rasterspcv import Kernel3D, GeoTiffSlicer\n",
    "\"\"\"\n",
    "class DataGenerator(Sequence): \n",
    "    'Generates data for Keras'\n",
    "    def __init__(self, data_set, labels, batch_size=BS,\n",
    "            dim=(KERNEL_PIXELS,KERNEL_PIXELS,CHANNELS),\n",
    "            n_channels=CHANNELS, n_classes=NUM_CLASSES,\n",
    "            shuffle=True, augment_data=True):\n",
    "        'Initialization'\n",
    "        self.dim = dim\n",
    "        self.batch_size = batch_size\n",
    "        self.labels = labels\n",
    "        self.data_set = data_set\n",
    "        self.n_channels = n_channels\n",
    "        self.n_classes = n_classes\n",
    "        self.shuffle = shuffle\n",
    "        self.augment_data = augment_data\n",
    "        self.on_epoch_end()\n",
    "\n",
    "    def __len__(self):\n",
    "        'Denotes the number of batches per epoch'\n",
    "        return int(np.floor(len(self.data_set) / self.batch_size))\n",
    "\n",
    "    def __getitem__(self, index):\n",
    "        'Generate one batch of data'\n",
    "        # Generate indexes of the batch\n",
    "        indexes = self.indexes[index*self.batch_size:(index+1)*self.batch_size]\n",
    "        # Generate data\n",
    "        X, y = self.__data_generation(indexes)\n",
    "\n",
    "        return X, y\n",
    "\n",
    "    def on_epoch_end(self):\n",
    "        'Updates indexes after each epoch'\n",
    "        self.indexes = np.arange(len(self.data_set))\n",
    "        if self.shuffle == True:\n",
    "            np.random.shuffle(self.indexes)\n",
    "\n",
    "    def __data_generation(self, list_IDs_temp):\n",
    "        'Generates data containing batch_size samples' # X : (n_samples, *dim, n_channels)\n",
    "        # Initialization\n",
    "        X = np.empty((self.batch_size, *self.dim, self.n_channels))\n",
    "        y = np.empty((self.batch_size, self.n_classes), dtype=int)\n",
    "        # Generate data\n",
    "        for i, ID in enumerate(list_IDs_temp):\n",
    "            # Store sample\n",
    "            image_raw = self.data_set[ID]\n",
    "            if self.augment_data:\n",
    "                image_raw = rotate(image_raw, angle=15*np.random.randint(6), mode='symmetric')\n",
    "                if np.random.randint(1):\n",
    "                    image_raw = np.rot90( image_raw, 2 )\n",
    "                if np.random.randint(1):\n",
    "                    image_raw = np.fliplr( image_raw )\n",
    "                if np.random.randint(1):\n",
    "                    image_raw = np.flipud( image_raw )\n",
    "            X[i,] = image_raw\n",
    "            # Store class\n",
    "            y[i] = self.labels[ID]\n",
    "        return X, y\n",
    "\n",
    "\n",
    "class Kernel3D:\n",
    "    def __init__(self, rows=3, cols=3, shape='rect', radius=None, no_value=np.NaN):\n",
    "        if shape == 'circle':\n",
    "            self.rows = 2*radius+1\n",
    "            self.cols = 2*radius+1\n",
    "            self.mask = self.round_mask(radius)\n",
    "            self.row_buffer = radius\n",
    "            self.col_buffer = radius\n",
    "        else:\n",
    "            self.rows = rows\n",
    "            self.cols = cols\n",
    "            self.mask = np.ones((rows, cols))\n",
    "            self.row_buffer = int((rows-1)/2)\n",
    "            self.col_buffer = int((cols-1)/2)\n",
    "        self.mask = self.mask[np.newaxis, :, :]\n",
    "        self.no_value = no_value\n",
    "        assert((rows%2) == 1)\n",
    "        assert((cols%2) == 1)\n",
    "\n",
    "    def round_mask(self, radius):\n",
    "        diameter = 2*radius+1\n",
    "        mask = np.empty((diameter, diameter,))\n",
    "        mask[:] = self.no_value\n",
    "        sq_radius = radius**2\n",
    "        for i in range(diameter):\n",
    "            for j in range(diameter):\n",
    "                if ((i-radius)**2+(j-radius)**2) <= sq_radius:\n",
    "                    mask[i, j] = 1\n",
    "        return mask\n",
    "\n",
    "    def getSubset(self, matrix, row, column):\n",
    "        m_rows = matrix.shape[1]\n",
    "        assert (row >= self.row_buffer), f\"Out of bounds row {row}, from {m_rows}\"\n",
    "        assert (row < (m_rows-self.row_buffer)), f\"Out of bounds row {row}, from {m_rows}\"\n",
    "        m_cols = matrix.shape[2]\n",
    "        assert((column >= self.col_buffer) and (column < (m_cols-self.col_buffer))), f\"Out of bounds column {column}, from {m_cols}\"\n",
    "        row_start = row-self.row_buffer\n",
    "        row_end = row+self.row_buffer\n",
    "        column_start = column-self.col_buffer\n",
    "        column_end = column+self.col_buffer\n",
    "        small_matrix = matrix[:, row_start:row_end+1, column_start:column_end+1]\n",
    "        return small_matrix*self.mask\n",
    "\n",
    "    def getPercentage(self, matrix, row, column):\n",
    "        test_matrix = self.getSubset(matrix, column, row)\n",
    "        return test_matrix.mean()\n",
    "\n",
    "class GeoTiffSlicer(object):\n",
    "    def __init__(self, land_matrix, kernel_rows=None, kernel_cols=None,\n",
    "                 kernel_shape='rect', kernel_radius=0, no_value = np.NaN):\n",
    "        # (d, h, w) input tiff from rasterio\n",
    "        if kernel_cols is None:\n",
    "            kernel_cols = kernel_rows\n",
    "        assert(kernel_cols < land_matrix.shape[2])\n",
    "        assert(kernel_rows < land_matrix.shape[1])\n",
    "        assert((kernel_shape == 'rect') or (kernel_shape == 'circle'))\n",
    "        assert(kernel_radius>=0)\n",
    "        if kernel_shape == 'rect':\n",
    "            self.kernel = Kernel3D(rows=kernel_rows, cols=kernel_cols)\n",
    "        else:\n",
    "            self.kernel = Kernel3D(radius=kernel_radius,\n",
    "                                   shape=kernel_shape,\n",
    "                                   no_value=no_value)\n",
    "            kernel_rows = kernel_cols = 2*kernel_radius+1\n",
    "        self.kernel_rows = kernel_rows\n",
    "        self.kernel_cols = kernel_cols\n",
    "        self.land_matrix = land_matrix\n",
    "        self.land_matrix_channels, self.land_matrix_cols, self.land_matrix_rows = land_matrix.shape\n",
    "        self.land_matrix_cols = land_matrix.shape[2]\n",
    "        self.land_matrix_rows = land_matrix.shape[1]\n",
    "        self.land_matrix_channels = land_matrix.shape[0]\n",
    "        self.small_row_min = self.kernel.row_buffer\n",
    "        self.small_row_max = self.land_matrix_rows - self.small_row_min\n",
    "        self.small_column_min = self.kernel.col_buffer\n",
    "        self.small_column_max = self.land_matrix_cols - self.small_column_min\n",
    "\n",
    "    def apply_mask(self, row, column):\n",
    "        return self.kernel.getSubset(self.land_matrix, row=row, column=column)\n",
    "\n",
    "    def calculate(self):\n",
    "        m1 = np.zeros_like(self.land_matrix, dtype='float')\n",
    "        for j in range(self.small_row_min, self.small_row_max):\n",
    "            for i in range(self.small_column_min, self.small_column_max):\n",
    "                m1[i, j] = self.kernel.getPercentage(self.land_matrix, column=i, row=j)\n",
    "        return m1\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c862d9e0",
   "metadata": {},
   "source": [
    "## Create cross-validation class from rasters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "9a41c5d5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\nclass RasterSpCV(BaseCrossValidator, list, ABC):\\n    def __init__(self, base_image, kernel_size,\\n                 no_value = np.NaN, verbose = 0,\\n                 partitions = 5,\\n                 augment = False,\\n                 sample = None, random_state = None):\\n        if(isinstance(base_image, str)):\\n            try:\\n                base_image = rio.open(base_image)\\n            except:\\n                print(f\"Failed to open file {base_image}\")\\n        assert isinstance(base_image, rasterio.io.DatasetReader), f\"Wrong type, received {type(base_image)}\"\\n        try:\\n          c, h, w = base_image.count, base_image.height, base_image.width\\n        except:\\n          c=h=w=0\\n        assert (c>1) and (h>kernel_size*2) and  (w>kernel_size*2)\\n        assert ((isinstance(sample, type(None))) or (isinstance(sample, int))), f\"Wrong type, received {type(sample)}\"\\n        assert ((kernel_size>0) and ((kernel_size%2)==1))\\n        self.augment = augment\\n        self.kernel_size = kernel_size\\n        self.verbose = verbose\\n        xmin, ymax = np.around(base_image.xy(0.00, 0.00), 8)  # millimeter accuracy for longitude\\n        xmax, ymin = np.around(base_image.xy(h-1, w-1), 8)  # millimeter accuracy\\n        tif_x = np.linspace(xmin, xmax, w)\\n        tif_y = np.linspace(ymax, ymin, h) # coordinates are top to bottom\\n        tif_col = np.arange(w)\\n        tif_row = np.arange(h)#[::-1] # This will match numpy array location\\n        xs, ys = np.meshgrid(tif_x, tif_y)\\n        cs, rs = np.meshgrid(tif_col, tif_row)\\n        zs = base_image.read(1) # First band contains categories\\n        if(verbose>0):\\n            zs_u = len(np.unique(zs))\\n            if(zs_u<2):\\n                print(\"Warning, \", zs_u, \" output categories is less than 2\")\\n        tif_mask = base_image.read_masks(1) > 0\\n        # Just keep valid points (non-NaN)\\n        xs, ys = xs[tif_mask], ys[tif_mask]\\n        cs, rs, zs = cs[tif_mask], rs[tif_mask], zs[tif_mask]\\n        data = {\\'Column\\': pd.Series(cs.ravel()),\\n                \\'Row\\': pd.Series(rs.ravel()),\\n                \\'x\\': pd.Series(xs.ravel()),\\n                \\'y\\': pd.Series(ys.ravel()),\\n                \\'z\\': pd.Series(zs.ravel())}\\n        df = pd.DataFrame(data=data)\\n        df = df.dropna()\\n        geometry = gpd.points_from_xy(df.x, df.y)\\n        tif_crs = base_image.crs\\n        gdf = gpd.GeoDataFrame(df, crs=tif_crs, geometry=geometry) # [[\\'z\\', \\'Column\\', \\'Row\\']]\\n        if(not isinstance(sample, type(None))):\\n            gdf=gdf.sample(n = sample, random_state=random_state)\\n        if(verbose>0):\\n            print(\"Splitting input layer data with MiniBatchKMeans\")\\n        km_spcv = MiniBatchKMeans(n_clusters = partitions,\\n                                  random_state=random_state)\\n        tif_folding = gdf.copy()\\n        tif_folding[\\'Fold\\'] = -1\\n        km_spcv_model = km_spcv.fit(tif_folding[[\\'x\\', \\'y\\']])\\n        labels = km_spcv_model.labels_\\n        unique_labels, counts = np.unique(labels, return_counts=True)\\n        if(verbose>0):\\n            print(\"Counts:\", counts)\\n            print(\"Labels: #\", len(labels))\\n            print(\"Partitions:\", unique_labels)\\n        assert (len(unique_labels)==partitions)\\n        tif_folding[\\'Fold\\'] = (labels)\\n        self.folding = tif_folding\\n        n_splits = len(unique_labels)\\n        self.partitions = unique_labels\\n        _land_matrix = base_image.read()\\n        _land_matrix = _land_matrix[1:(CHANNELS+1), :, :]\\n        _land_matrix = np.nan_to_num(_land_matrix)\\n        _land_matrix = np.pad(_land_matrix,\\n                              pad_width=((0,0),\\n                                         (kernel_size, kernel_size),\\n                                         (kernel_size, kernel_size)), \\n                              mode=\\'symmetric\\')\\n        if(verbose>0):\\n            print(\"Shape of new tiff:\", _land_matrix.shape)\\n        self.slicer = GeoTiffSlicer(land_matrix=_land_matrix,\\n                                    kernel_rows=kernel_size)\\n        self.shape = (len(self.folding.index), kernel_size, kernel_size, c-1)\\n        \\n    def RepeatedCV(self, n_repeats=2):\\n        for i in range(n_repeats):\\n            for fold_index in self.partitions:\\n                if(self.verbose>1):\\n                    print(\"Fold:\", fold_index)\\n                test_indices = np.flatnonzero(self.folding.Fold==fold_index)\\n                train_indices = np.flatnonzero(self.folding.Fold!=fold_index)\\n                random.shuffle(train_indices)\\n                random.shuffle(test_indices)\\n                yield (train_indices), (test_indices)\\n\\n\\n    def SpatialCV_split(self):\\n        for fold_index in self.partitions:\\n            if(self.verbose>1):\\n                print(\"Fold:\", fold_index)\\n            test_indices = np.flatnonzero(self.folding.Fold==fold_index)\\n            train_indices = np.flatnonzero(self.folding.Fold!=fold_index)\\n            random.shuffle(train_indices)\\n            random.shuffle(test_indices)\\n            yield (train_indices), (test_indices)\\n\\n    def y(self):\\n        return np.asarray(self.folding.z)\\n    def X(self):\\n        return self\\n    def __nonzero__(self):\\n        return len(self.folding.index)>0\\n    def __len__(self):\\n        return len(self.folding.index)\\n    def __bool__(self):\\n        return len(self.folding.index)>0\\n    def __getitem__(self, key):\\n        if(self.verbose>2):\\n            if(isinstance(key, int) or isinstance(key, np.int64)):\\n                print(\"Query with key:\", key)\\n            else:\\n                print(\"Query type:\", type(key))\\n        if(isinstance(key, int) or isinstance(key, np.int64)):\\n            r, c = self.folding.iloc[key].Row, self.folding.iloc[key].Column\\n            r, c = r+self.kernel_size, c+self.kernel_size\\n            a_slice = self.slicer.apply_mask(row=r, column=c)\\n            a_slice = np.transpose(a_slice, axes=(2,1,0))\\n            if (self.augment):\\n                a_slice = rotate(a_slice, angle=15*np.random.randint(6), mode=\\'symmetric\\')\\n                # a_slice = np.rot90(a_slice, k= np.random.randint(3))\\n                if np.random.randint(1):\\n                    a_slice = np.fliplr(a_slice)\\n                if np.random.randint(1):\\n                    a_slice = np.flipud(a_slice)\\n            return a_slice\\n        if(isinstance(key, np.ndarray)):\\n            return np.asarray([self[i] for i in key], dtype=np.float64)\\n        print(\"Don\\'t know how to handle \", type(key))\\n        return None\\n\\n    def get_n_splits(self):\\n        return self.n_splits\\n\\n'"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from jigsaw.rasterspcv import RasterSpCV\n",
    "\n",
    "\"\"\"\n",
    "class RasterSpCV(BaseCrossValidator, list, ABC):\n",
    "    def __init__(self, base_image, kernel_size,\n",
    "                 no_value = np.NaN, verbose = 0,\n",
    "                 partitions = 5,\n",
    "                 augment = False,\n",
    "                 sample = None, random_state = None):\n",
    "        if(isinstance(base_image, str)):\n",
    "            try:\n",
    "                base_image = rio.open(base_image)\n",
    "            except:\n",
    "                print(f\"Failed to open file {base_image}\")\n",
    "        assert isinstance(base_image, rasterio.io.DatasetReader), f\"Wrong type, received {type(base_image)}\"\n",
    "        try:\n",
    "          c, h, w = base_image.count, base_image.height, base_image.width\n",
    "        except:\n",
    "          c=h=w=0\n",
    "        assert (c>1) and (h>kernel_size*2) and  (w>kernel_size*2)\n",
    "        assert ((isinstance(sample, type(None))) or (isinstance(sample, int))), f\"Wrong type, received {type(sample)}\"\n",
    "        assert ((kernel_size>0) and ((kernel_size%2)==1))\n",
    "        self.augment = augment\n",
    "        self.kernel_size = kernel_size\n",
    "        self.verbose = verbose\n",
    "        xmin, ymax = np.around(base_image.xy(0.00, 0.00), 8)  # millimeter accuracy for longitude\n",
    "        xmax, ymin = np.around(base_image.xy(h-1, w-1), 8)  # millimeter accuracy\n",
    "        tif_x = np.linspace(xmin, xmax, w)\n",
    "        tif_y = np.linspace(ymax, ymin, h) # coordinates are top to bottom\n",
    "        tif_col = np.arange(w)\n",
    "        tif_row = np.arange(h)#[::-1] # This will match numpy array location\n",
    "        xs, ys = np.meshgrid(tif_x, tif_y)\n",
    "        cs, rs = np.meshgrid(tif_col, tif_row)\n",
    "        zs = base_image.read(1) # First band contains categories\n",
    "        if(verbose>0):\n",
    "            zs_u = len(np.unique(zs))\n",
    "            if(zs_u<2):\n",
    "                print(\"Warning, \", zs_u, \" output categories is less than 2\")\n",
    "        tif_mask = base_image.read_masks(1) > 0\n",
    "        # Just keep valid points (non-NaN)\n",
    "        xs, ys = xs[tif_mask], ys[tif_mask]\n",
    "        cs, rs, zs = cs[tif_mask], rs[tif_mask], zs[tif_mask]\n",
    "        data = {'Column': pd.Series(cs.ravel()),\n",
    "                'Row': pd.Series(rs.ravel()),\n",
    "                'x': pd.Series(xs.ravel()),\n",
    "                'y': pd.Series(ys.ravel()),\n",
    "                'z': pd.Series(zs.ravel())}\n",
    "        df = pd.DataFrame(data=data)\n",
    "        df = df.dropna()\n",
    "        geometry = gpd.points_from_xy(df.x, df.y)\n",
    "        tif_crs = base_image.crs\n",
    "        gdf = gpd.GeoDataFrame(df, crs=tif_crs, geometry=geometry) # [['z', 'Column', 'Row']]\n",
    "        if(not isinstance(sample, type(None))):\n",
    "            gdf=gdf.sample(n = sample, random_state=random_state)\n",
    "        if(verbose>0):\n",
    "            print(\"Splitting input layer data with MiniBatchKMeans\")\n",
    "        km_spcv = MiniBatchKMeans(n_clusters = partitions,\n",
    "                                  random_state=random_state)\n",
    "        tif_folding = gdf.copy()\n",
    "        tif_folding['Fold'] = -1\n",
    "        km_spcv_model = km_spcv.fit(tif_folding[['x', 'y']])\n",
    "        labels = km_spcv_model.labels_\n",
    "        unique_labels, counts = np.unique(labels, return_counts=True)\n",
    "        if(verbose>0):\n",
    "            print(\"Counts:\", counts)\n",
    "            print(\"Labels: #\", len(labels))\n",
    "            print(\"Partitions:\", unique_labels)\n",
    "        assert (len(unique_labels)==partitions)\n",
    "        tif_folding['Fold'] = (labels)\n",
    "        self.folding = tif_folding\n",
    "        n_splits = len(unique_labels)\n",
    "        self.partitions = unique_labels\n",
    "        _land_matrix = base_image.read()\n",
    "        _land_matrix = _land_matrix[1:(CHANNELS+1), :, :]\n",
    "        _land_matrix = np.nan_to_num(_land_matrix)\n",
    "        _land_matrix = np.pad(_land_matrix,\n",
    "                              pad_width=((0,0),\n",
    "                                         (kernel_size, kernel_size),\n",
    "                                         (kernel_size, kernel_size)), \n",
    "                              mode='symmetric')\n",
    "        if(verbose>0):\n",
    "            print(\"Shape of new tiff:\", _land_matrix.shape)\n",
    "        self.slicer = GeoTiffSlicer(land_matrix=_land_matrix,\n",
    "                                    kernel_rows=kernel_size)\n",
    "        self.shape = (len(self.folding.index), kernel_size, kernel_size, c-1)\n",
    "        \n",
    "    def RepeatedCV(self, n_repeats=2):\n",
    "        for i in range(n_repeats):\n",
    "            for fold_index in self.partitions:\n",
    "                if(self.verbose>1):\n",
    "                    print(\"Fold:\", fold_index)\n",
    "                test_indices = np.flatnonzero(self.folding.Fold==fold_index)\n",
    "                train_indices = np.flatnonzero(self.folding.Fold!=fold_index)\n",
    "                random.shuffle(train_indices)\n",
    "                random.shuffle(test_indices)\n",
    "                yield (train_indices), (test_indices)\n",
    "\n",
    "\n",
    "    def SpatialCV_split(self):\n",
    "        for fold_index in self.partitions:\n",
    "            if(self.verbose>1):\n",
    "                print(\"Fold:\", fold_index)\n",
    "            test_indices = np.flatnonzero(self.folding.Fold==fold_index)\n",
    "            train_indices = np.flatnonzero(self.folding.Fold!=fold_index)\n",
    "            random.shuffle(train_indices)\n",
    "            random.shuffle(test_indices)\n",
    "            yield (train_indices), (test_indices)\n",
    "\n",
    "    def y(self):\n",
    "        return np.asarray(self.folding.z)\n",
    "    def X(self):\n",
    "        return self\n",
    "    def __nonzero__(self):\n",
    "        return len(self.folding.index)>0\n",
    "    def __len__(self):\n",
    "        return len(self.folding.index)\n",
    "    def __bool__(self):\n",
    "        return len(self.folding.index)>0\n",
    "    def __getitem__(self, key):\n",
    "        if(self.verbose>2):\n",
    "            if(isinstance(key, int) or isinstance(key, np.int64)):\n",
    "                print(\"Query with key:\", key)\n",
    "            else:\n",
    "                print(\"Query type:\", type(key))\n",
    "        if(isinstance(key, int) or isinstance(key, np.int64)):\n",
    "            r, c = self.folding.iloc[key].Row, self.folding.iloc[key].Column\n",
    "            r, c = r+self.kernel_size, c+self.kernel_size\n",
    "            a_slice = self.slicer.apply_mask(row=r, column=c)\n",
    "            a_slice = np.transpose(a_slice, axes=(2,1,0))\n",
    "            if (self.augment):\n",
    "                a_slice = rotate(a_slice, angle=15*np.random.randint(6), mode='symmetric')\n",
    "                # a_slice = np.rot90(a_slice, k= np.random.randint(3))\n",
    "                if np.random.randint(1):\n",
    "                    a_slice = np.fliplr(a_slice)\n",
    "                if np.random.randint(1):\n",
    "                    a_slice = np.flipud(a_slice)\n",
    "            return a_slice\n",
    "        if(isinstance(key, np.ndarray)):\n",
    "            return np.asarray([self[i] for i in key], dtype=np.float64)\n",
    "        print(\"Don't know how to handle \", type(key))\n",
    "        return None\n",
    "\n",
    "    def get_n_splits(self):\n",
    "        return self.n_splits\n",
    "\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d60979d2",
   "metadata": {},
   "source": [
    "### [Optional] Test class RasterSpCV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3b62c118",
   "metadata": {},
   "outputs": [],
   "source": [
    "rSpCV = RasterSpCV(tif_file_name, kernel_pixels, sample = 10, verbose=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cdf2c557",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "cv = rSpCV.SpatialCV_split()\n",
    "rSpCV.slicer.land_matrix.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a3fdca2a",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "for tr, ts in cv:\n",
    "    print(ts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ed449299",
   "metadata": {},
   "outputs": [],
   "source": [
    "k=(np.flatnonzero(rSpCV.folding.Fold==2))\n",
    "random.shuffle(k)\n",
    "k"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3feb9568",
   "metadata": {},
   "source": [
    "## Functions to create jigsaw"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c6f65407",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\"\"\"\n",
    "def jigsaw_m( input_net, first_layer = None , internal_size = 3):\n",
    "    conv1 = Conv2D(128, (1,1), padding='same', activation = 'relu', kernel_regularizer = l2(0.002))(input_net)\n",
    "    jigsaw_t1_1x1 = Conv2D(256, (1,1), padding='same', activation = 'relu', kernel_regularizer = l2(0.002))(conv1)\n",
    "    jigsaw_t1_3x3_reduce = Conv2D(96, (1,1), padding='same', activation = 'relu', kernel_regularizer = l2(0.002))(input_net)\n",
    "    jigsaw_t1_3x3 = Conv2D(128, (3,3), padding='same', activation = 'relu', kernel_regularizer = l2(0.002), name=\"i_3x3\")(jigsaw_t1_3x3_reduce)\n",
    "    if (internal_size >= 5):\n",
    "        jigsaw_t1_5x5_reduce = Conv2D(16, (1,1), padding='same', activation = 'relu', kernel_regularizer = l2(0.002))(input_net)\n",
    "        jigsaw_t1_5x5 = Conv2D(128, (5,5), padding='same', activation = 'relu', kernel_regularizer = l2(0.002), name=\"i_5x5\")(jigsaw_t1_5x5_reduce)\n",
    "    if (internal_size >= 7):\n",
    "        jigsaw_t1_7x7_reduce = Conv2D(16, (1,1), padding='same', activation = 'relu', kernel_regularizer = l2(0.002))(input_net)\n",
    "        jigsaw_t1_7x7 = Conv2D(128, (7,7), padding='same', activation = 'relu', kernel_regularizer = l2(0.002), name=\"i_7x7\")(jigsaw_t1_7x7_reduce)\n",
    "    if (internal_size >= 9):\n",
    "        jigsaw_t1_9x9_reduce = Conv2D(16, (1,1), padding='same', activation = 'relu', kernel_regularizer = l2(0.002))(input_net)\n",
    "        jigsaw_t1_9x9 = Conv2D(64, (9,9), padding='same', activation = 'relu', kernel_regularizer = l2(0.002), name=\"i_9x9\")(jigsaw_t1_9x9_reduce)\n",
    "    if (internal_size >= 11):\n",
    "        jigsaw_t1_11x11_reduce = Conv2D(16, (1,1), padding='same', activation = 'relu', kernel_regularizer = l2(0.002))(input_net)\n",
    "        jigsaw_t1_11x11 = Conv2D(64, (11,11), padding='same', activation = 'relu', kernel_regularizer = l2(0.002), name=\"i_11x11\")(jigsaw_t1_11x11_reduce)\n",
    "    if (internal_size >= 13):\n",
    "        jigsaw_t1_13x13_reduce = Conv2D(16, (1,1), padding='same', activation = 'relu', kernel_regularizer = l2(0.002))(input_net)\n",
    "        jigsaw_t1_13x13 = Conv2D(64, (13,13), padding='same', activation = 'relu', kernel_regularizer = l2(0.002), name=\"i_13x13\")(jigsaw_t1_13x13_reduce)\n",
    "    jigsaw_t1_pool = MaxPooling2D(pool_size=(3,3), strides = (1,1), padding='same')(conv1)\n",
    "    jigsaw_t1_pool_proj = Conv2D(32, (1,1), padding='same', activation = 'relu', kernel_regularizer = l2(0.002))(jigsaw_t1_pool)\n",
    "    jigsaw_list = [jigsaw_t1_1x1, jigsaw_t1_3x3]\n",
    "    if (internal_size >= 5):\n",
    "        jigsaw_list.append(jigsaw_t1_5x5)\n",
    "    if (internal_size >= 7):\n",
    "        jigsaw_list.append(jigsaw_t1_7x7)\n",
    "    if (internal_size >= 9):\n",
    "        jigsaw_list.append(jigsaw_t1_9x9)\n",
    "    if (internal_size >= 11):\n",
    "        jigsaw_list.append(jigsaw_t1_11x11)\n",
    "    if (internal_size >= 13):\n",
    "        jigsaw_list.append(jigsaw_t1_13x13)\n",
    "    jigsaw_list.append(jigsaw_t1_pool_proj)\n",
    "    if first_layer is None:\n",
    "        pass\n",
    "        #jigsaw_t1_output = Concatenate(axis = -1)([jigsaw_t1_1x1, jigsaw_t1_3x3,\n",
    "        #                                          # jigsaw_t1_5x5,\n",
    "        #                                          # jigsaw_t1_7x7, jigsaw_t1_9x9,\n",
    "        #                                          #jigsaw_t1_11x11, jigsaw_t1_13x13,\n",
    "        #                                          jigsaw_t1_pool_proj])\n",
    "    else:\n",
    "        jigsaw_t1_first = Conv2D(96, (1,1), padding='same', activation = 'relu', kernel_regularizer = l2(0.002))(first_layer)\n",
    "        jigsaw_list.append(jigsaw_t1_first)\n",
    "        #jigsaw_t1_output = Concatenate(axis = -1)([jigsaw_t1_first, jigsaw_t1_1x1, jigsaw_t1_3x3,\n",
    "        #                                              # jigsaw_t1_5x5, jigsaw_t1_7x7, jigsaw_t1_9x9,\n",
    "        #                                              #jigsaw_t1_11x11, jigsaw_t1_13x13,\n",
    "        #                                              jigsaw_t1_pool_proj])\n",
    "    jigsaw_t1_output = Concatenate(axis = -1)(jigsaw_list)\n",
    "    return jigsaw_t1_output\n",
    "\n",
    "def jigsaw_m_end( input_net, num_classes = NUM_CLASSES, first_layer = None ):\n",
    "    avg_pooling = AveragePooling2D(pool_size=(3,3), strides=(1,1), name='avg_pooling')(input_net)\n",
    "    flat = Flatten()(avg_pooling)\n",
    "    flat = Dense(16, kernel_regularizer=l2(0.002))(flat)\n",
    "    flat = Dropout(0.4)(flat)\n",
    "    if first_layer is not None:\n",
    "        input_pixel = Flatten()(first_layer)\n",
    "        input_pixel = Dense(16, kernel_regularizer=l2(0.002))(input_pixel)\n",
    "        input_pixel = Dropout(0.2)(input_pixel)\n",
    "        input_pixel = Dense(16, kernel_regularizer=l2(0.002))(input_pixel)\n",
    "        input_pixel = Dropout(0.2)(input_pixel)\n",
    "        flat = Concatenate(axis = -1)([input_pixel, flat])\n",
    "    flat = Dense(32, kernel_regularizer=l2(0.002))(flat)\n",
    "    avg_pooling = Dropout(0.4)(flat)\n",
    "    loss3_classifier = Dense(num_classes, kernel_regularizer=l2(0.002))(avg_pooling)\n",
    "    loss3_classifier_act = Activation('softmax', name='prob')(loss3_classifier)\n",
    "    return loss3_classifier_act\n",
    "\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "888055f3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\ndef build_jigsaw(internal_size=3):\\n    my_input = Input( shape=IMAGE_DIMS )\\n    print(f\"*** Building Jigsaw with up to {internal_size}x{internal_size} kernels\")\\n    # One jigsaw module(s)\\n    jigsaw_01 = jigsaw_m( my_input, internal_size = internal_size )\\n    # Attaches end to jigsaw modules, returns class within num_classes\\n    loss3_classifier_act = jigsaw_m_end(jigsaw_01,\\n                                    num_classes = num_classes,\\n                                    first_layer = my_input ) # testing num_classes\\n    model3 = Model( inputs = my_input, outputs = loss3_classifier_act )\\n    model3.compile(loss=\\'binary_crossentropy\\', optimizer=Adadelta(), metrics=[\\'accuracy\\'])\\n    return model3\\n'"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from jigsaw import build_jigsaw\n",
    "\n",
    "# Builds model\n",
    "\"\"\"\n",
    "def build_jigsaw(internal_size=3):\n",
    "    my_input = Input( shape=IMAGE_DIMS )\n",
    "    print(f\"*** Building Jigsaw with up to {internal_size}x{internal_size} kernels\")\n",
    "    # One jigsaw module(s)\n",
    "    jigsaw_01 = jigsaw_m( my_input, internal_size = internal_size )\n",
    "    # Attaches end to jigsaw modules, returns class within num_classes\n",
    "    loss3_classifier_act = jigsaw_m_end(jigsaw_01,\n",
    "                                    num_classes = num_classes,\n",
    "                                    first_layer = my_input ) # testing num_classes\n",
    "    model3 = Model( inputs = my_input, outputs = loss3_classifier_act )\n",
    "    model3.compile(loss='binary_crossentropy', optimizer=Adadelta(), metrics=['accuracy'])\n",
    "    return model3\n",
    "\"\"\"\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ffb13733",
   "metadata": {},
   "source": [
    "### [Optional] Test Jigsaw model creation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "2c286706",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*** Building Jigsaw with up to 3x3 kernels\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from tensorflow.keras.utils import plot_model\n",
    "\n",
    "#m = tf.keras.models.clone_model(model3)\n",
    "m = tf.keras.models.clone_model(build_jigsaw(3))\n",
    "gc.collect()\n",
    "# Plots architecture\n",
    "plot_model(m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bc4f06b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "rSpCV = RasterSpCV(tif_file_name, kernel_pixels, sample = 50000, verbose=0, augment = True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5024df85",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras.utils import to_categorical\n",
    "cv = rSpCV.SpatialCV_split()\n",
    "X = rSpCV.X()\n",
    "y = rSpCV.y()\n",
    "y_binary = to_categorical(y)\n",
    "\n",
    "f, axarr = pyplot.subplots(1,2)\n",
    "axarr[0].imshow(X[1][:,:,1])\n",
    "axarr[1].imshow(X[1][:,:,1])\n",
    "pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "39696852",
   "metadata": {},
   "outputs": [],
   "source": [
    "f, axarr = pyplot.subplots(1,2)\n",
    "axarr[0].imshow(X[1][:,:,1])\n",
    "axarr[1].imshow(X[1][:,:,1])\n",
    "pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f3311877",
   "metadata": {},
   "outputs": [],
   "source": [
    "BS = 10 # Was 50\n",
    "EPOCHS = 10 # Was 50\n",
    "m = KerasClassifier(build_jigsaw, batch_size = BS, epochs = EPOCHS)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a450af6a",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "scores = cross_val_score(m, X, y_binary, cv=cv)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4a5fa224",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "scores, np.mean(scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b60ba1be",
   "metadata": {},
   "outputs": [],
   "source": [
    "# With 3x3 kernels\n",
    "# Epochs A scores\n",
    "#     10 F (array([0.69809216, 0.61910695, 0.94752526, 0.79340768, 0.84017217]), 0.7796608448028565)\n",
    "#     10 T (array([0.96171987, 0.67508829, 0.72336709, 0.62722361, 0.97688884]), 0.792857539653778)\n",
    "#     50 T (array([0.97121   , 0.98631495, 0.75165534, 0.60664952, 0.63382876]), 0.7899317145347595)\n",
    "\n",
    "result_1 = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6c6d791c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "23bd68df",
   "metadata": {},
   "source": [
    "# GridSearch Parameter Crossvalidation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "2234bb29",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "from tensorflow.keras.utils import to_categorical\n",
    "from sklearn.metrics import make_scorer\n",
    "from sklearn.metrics import accuracy_score\n",
    "import itertools\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "a4f0942a",
   "metadata": {},
   "outputs": [],
   "source": [
    "rSpCV = RasterSpCV(tif_file_name, kernel_size=kernel_pixels, sample = 50000, verbose=0, augment = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "bb3a6ed6",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*** Building Jigsaw with up to 3x3 kernels\n",
      "Epoch 1/10\n",
      "3936/3936 [==============================] - 24s 6ms/step - loss: 1.4737 - accuracy: 0.8072\n",
      "Epoch 2/10\n",
      "3936/3936 [==============================] - 24s 6ms/step - loss: 1.3969 - accuracy: 0.8121\n",
      "Epoch 3/10\n",
      "3936/3936 [==============================] - 24s 6ms/step - loss: 1.3411 - accuracy: 0.8185\n",
      "Epoch 4/10\n",
      "3936/3936 [==============================] - 24s 6ms/step - loss: 1.2930 - accuracy: 0.8261\n",
      "Epoch 5/10\n",
      "3936/3936 [==============================] - 24s 6ms/step - loss: 1.2534 - accuracy: 0.8320\n",
      "Epoch 6/10\n",
      "3936/3936 [==============================] - 24s 6ms/step - loss: 1.2226 - accuracy: 0.8369\n",
      "Epoch 7/10\n",
      "3936/3936 [==============================] - 24s 6ms/step - loss: 1.1968 - accuracy: 0.8390\n",
      "Epoch 8/10\n",
      "3936/3936 [==============================] - 24s 6ms/step - loss: 1.1730 - accuracy: 0.8413\n",
      "Epoch 9/10\n",
      "3936/3936 [==============================] - 24s 6ms/step - loss: 1.1546 - accuracy: 0.8429\n",
      "Epoch 10/10\n",
      "3936/3936 [==============================] - 24s 6ms/step - loss: 1.1354 - accuracy: 0.8455\n",
      "1065/1065 [==============================] - 3s 3ms/step - loss: 1.2990 - accuracy: 0.7620\n",
      "3936/3936 [==============================] - 13s 3ms/step - loss: 1.1069 - accuracy: 0.8488\n",
      "*** Building Jigsaw with up to 3x3 kernels\n",
      "Epoch 1/10\n",
      "4079/4079 [==============================] - 25s 6ms/step - loss: 1.4437 - accuracy: 0.8262\n",
      "Epoch 2/10\n",
      "4079/4079 [==============================] - 25s 6ms/step - loss: 1.3414 - accuracy: 0.8386\n",
      "Epoch 3/10\n",
      "4079/4079 [==============================] - 25s 6ms/step - loss: 1.2859 - accuracy: 0.8455\n",
      "Epoch 4/10\n",
      "4079/4079 [==============================] - 25s 6ms/step - loss: 1.2487 - accuracy: 0.8463\n",
      "Epoch 5/10\n",
      "4079/4079 [==============================] - 25s 6ms/step - loss: 1.2234 - accuracy: 0.8491\n",
      "Epoch 6/10\n",
      "4079/4079 [==============================] - 25s 6ms/step - loss: 1.2008 - accuracy: 0.8506\n",
      "Epoch 7/10\n",
      "4079/4079 [==============================] - 25s 6ms/step - loss: 1.1788 - accuracy: 0.8519\n",
      "Epoch 8/10\n",
      "4079/4079 [==============================] - 25s 6ms/step - loss: 1.1583 - accuracy: 0.8522\n",
      "Epoch 9/10\n",
      "4079/4079 [==============================] - 25s 6ms/step - loss: 1.1414 - accuracy: 0.8519\n",
      "Epoch 10/10\n",
      "4079/4079 [==============================] - 25s 6ms/step - loss: 1.1220 - accuracy: 0.8544\n",
      "922/922 [==============================] - 3s 3ms/step - loss: 1.4309 - accuracy: 0.6500\n",
      "4079/4079 [==============================] - 12s 3ms/step - loss: 1.0963 - accuracy: 0.8563\n",
      "*** Building Jigsaw with up to 3x3 kernels\n",
      "Epoch 1/10\n",
      "3975/3975 [==============================] - 24s 6ms/step - loss: 1.4669 - accuracy: 0.8353\n",
      "Epoch 2/10\n",
      "3975/3975 [==============================] - 25s 6ms/step - loss: 1.3673 - accuracy: 0.8426\n",
      "Epoch 3/10\n",
      "3975/3975 [==============================] - 25s 6ms/step - loss: 1.3055 - accuracy: 0.8440\n",
      "Epoch 4/10\n",
      "3975/3975 [==============================] - 24s 6ms/step - loss: 1.2668 - accuracy: 0.8465\n",
      "Epoch 5/10\n",
      "3975/3975 [==============================] - 24s 6ms/step - loss: 1.2370 - accuracy: 0.8475\n",
      "Epoch 6/10\n",
      "3975/3975 [==============================] - 25s 6ms/step - loss: 1.2157 - accuracy: 0.8490\n",
      "Epoch 7/10\n",
      "3975/3975 [==============================] - 25s 6ms/step - loss: 1.1942 - accuracy: 0.8515\n",
      "Epoch 8/10\n",
      "3975/3975 [==============================] - 25s 6ms/step - loss: 1.1778 - accuracy: 0.8531\n",
      "Epoch 9/10\n",
      "3975/3975 [==============================] - 25s 6ms/step - loss: 1.1607 - accuracy: 0.8540\n",
      "Epoch 10/10\n",
      "3975/3975 [==============================] - 25s 6ms/step - loss: 1.1448 - accuracy: 0.8530\n",
      "1026/1026 [==============================] - 3s 3ms/step - loss: 1.4398 - accuracy: 0.7124\n",
      "3975/3975 [==============================] - 11s 3ms/step - loss: 1.1166 - accuracy: 0.8616\n",
      "*** Building Jigsaw with up to 3x3 kernels\n",
      "Epoch 1/10\n",
      "3891/3891 [==============================] - 24s 6ms/step - loss: 1.5236 - accuracy: 0.7399\n",
      "Epoch 2/10\n",
      "3891/3891 [==============================] - 24s 6ms/step - loss: 1.4377 - accuracy: 0.7640\n",
      "Epoch 3/10\n",
      "3891/3891 [==============================] - 24s 6ms/step - loss: 1.3882 - accuracy: 0.7686\n",
      "Epoch 4/10\n",
      "3891/3891 [==============================] - 24s 6ms/step - loss: 1.3548 - accuracy: 0.7727\n",
      "Epoch 5/10\n",
      "3891/3891 [==============================] - 24s 6ms/step - loss: 1.3278 - accuracy: 0.7769\n",
      "Epoch 6/10\n",
      "3891/3891 [==============================] - 24s 6ms/step - loss: 1.3054 - accuracy: 0.7787\n",
      "Epoch 7/10\n",
      "3891/3891 [==============================] - 24s 6ms/step - loss: 1.2861 - accuracy: 0.7810\n",
      "Epoch 8/10\n",
      "3891/3891 [==============================] - 24s 6ms/step - loss: 1.2690 - accuracy: 0.7828\n",
      "Epoch 9/10\n",
      "3891/3891 [==============================] - 24s 6ms/step - loss: 1.2507 - accuracy: 0.7853\n",
      "Epoch 10/10\n",
      "3891/3891 [==============================] - 24s 6ms/step - loss: 1.2335 - accuracy: 0.7864\n",
      "1110/1110 [==============================] - 3s 3ms/step - loss: 1.0125 - accuracy: 0.9748\n",
      "3891/3891 [==============================] - 11s 3ms/step - loss: 1.2114 - accuracy: 0.7909\n",
      "*** Building Jigsaw with up to 3x3 kernels\n",
      "Epoch 1/10\n",
      "4122/4122 [==============================] - 26s 6ms/step - loss: 1.5381 - accuracy: 0.7313\n",
      "Epoch 2/10\n",
      "4122/4122 [==============================] - 25s 6ms/step - loss: 1.4528 - accuracy: 0.7665\n",
      "Epoch 3/10\n",
      "4122/4122 [==============================] - 25s 6ms/step - loss: 1.3970 - accuracy: 0.7804\n",
      "Epoch 4/10\n",
      "4122/4122 [==============================] - 25s 6ms/step - loss: 1.3559 - accuracy: 0.7899\n",
      "Epoch 5/10\n",
      "4122/4122 [==============================] - 26s 6ms/step - loss: 1.3252 - accuracy: 0.7928\n",
      "Epoch 6/10\n",
      "4122/4122 [==============================] - 25s 6ms/step - loss: 1.3009 - accuracy: 0.7963\n",
      "Epoch 7/10\n",
      "4122/4122 [==============================] - 25s 6ms/step - loss: 1.2766 - accuracy: 0.8020\n",
      "Epoch 8/10\n",
      "4122/4122 [==============================] - 26s 6ms/step - loss: 1.2566 - accuracy: 0.8029\n",
      "Epoch 9/10\n",
      "4122/4122 [==============================] - 25s 6ms/step - loss: 1.2377 - accuracy: 0.8056\n",
      "Epoch 10/10\n",
      "4122/4122 [==============================] - 25s 6ms/step - loss: 1.2195 - accuracy: 0.8062\n",
      "879/879 [==============================] - 3s 3ms/step - loss: 0.9830 - accuracy: 0.9214\n",
      "4122/4122 [==============================] - 12s 3ms/step - loss: 1.1931 - accuracy: 0.8170\n",
      "*** Building Jigsaw with up to 3x3 kernels\n",
      "Epoch 1/10\n",
      "3936/3936 [==============================] - 25s 6ms/step - loss: 1.4779 - accuracy: 0.7851\n",
      "Epoch 2/10\n",
      "3936/3936 [==============================] - 25s 6ms/step - loss: 1.3847 - accuracy: 0.8151\n",
      "Epoch 3/10\n",
      "3936/3936 [==============================] - 25s 6ms/step - loss: 1.3243 - accuracy: 0.8217\n",
      "Epoch 4/10\n",
      "3936/3936 [==============================] - 25s 6ms/step - loss: 1.2800 - accuracy: 0.8296\n",
      "Epoch 5/10\n",
      "3936/3936 [==============================] - 25s 6ms/step - loss: 1.2441 - accuracy: 0.8336\n",
      "Epoch 6/10\n",
      "3936/3936 [==============================] - 25s 6ms/step - loss: 1.2144 - accuracy: 0.8401\n",
      "Epoch 7/10\n",
      "3936/3936 [==============================] - 24s 6ms/step - loss: 1.1887 - accuracy: 0.8430\n",
      "Epoch 8/10\n",
      "3936/3936 [==============================] - 25s 6ms/step - loss: 1.1674 - accuracy: 0.8440\n",
      "Epoch 9/10\n",
      "3936/3936 [==============================] - 26s 7ms/step - loss: 1.1483 - accuracy: 0.8469\n",
      "Epoch 10/10\n",
      "3936/3936 [==============================] - 26s 7ms/step - loss: 1.1285 - accuracy: 0.8494\n",
      "1065/1065 [==============================] - 3s 3ms/step - loss: 1.3135 - accuracy: 0.7551\n",
      "3936/3936 [==============================] - 11s 3ms/step - loss: 1.1028 - accuracy: 0.8550\n",
      "*** Building Jigsaw with up to 3x3 kernels\n",
      "Epoch 1/10\n",
      "4079/4079 [==============================] - 26s 6ms/step - loss: 1.4417 - accuracy: 0.8258\n",
      "Epoch 2/10\n",
      "4079/4079 [==============================] - 26s 6ms/step - loss: 1.3442 - accuracy: 0.8353\n",
      "Epoch 3/10\n",
      "4079/4079 [==============================] - 25s 6ms/step - loss: 1.2835 - accuracy: 0.8439\n",
      "Epoch 4/10\n",
      "4079/4079 [==============================] - 25s 6ms/step - loss: 1.2434 - accuracy: 0.8475\n",
      "Epoch 5/10\n",
      "4079/4079 [==============================] - 25s 6ms/step - loss: 1.2166 - accuracy: 0.8517\n",
      "Epoch 6/10\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4079/4079 [==============================] - 25s 6ms/step - loss: 1.1927 - accuracy: 0.8539\n",
      "Epoch 7/10\n",
      "4079/4079 [==============================] - 25s 6ms/step - loss: 1.1702 - accuracy: 0.8548\n",
      "Epoch 8/10\n",
      "4079/4079 [==============================] - 25s 6ms/step - loss: 1.1513 - accuracy: 0.8551\n",
      "Epoch 9/10\n",
      "4079/4079 [==============================] - 25s 6ms/step - loss: 1.1336 - accuracy: 0.8552\n",
      "Epoch 10/10\n",
      "4079/4079 [==============================] - 25s 6ms/step - loss: 1.1177 - accuracy: 0.8562\n",
      "922/922 [==============================] - 3s 3ms/step - loss: 1.4145 - accuracy: 0.6574\n",
      "4079/4079 [==============================] - 12s 3ms/step - loss: 1.0928 - accuracy: 0.8589\n",
      "*** Building Jigsaw with up to 3x3 kernels\n",
      "Epoch 1/10\n",
      "3975/3975 [==============================] - 25s 6ms/step - loss: 1.4720 - accuracy: 0.8224\n",
      "Epoch 2/10\n",
      "3975/3975 [==============================] - 25s 6ms/step - loss: 1.3833 - accuracy: 0.8360\n",
      "Epoch 3/10\n",
      "3975/3975 [==============================] - 25s 6ms/step - loss: 1.3229 - accuracy: 0.8387\n",
      "Epoch 4/10\n",
      "3975/3975 [==============================] - 25s 6ms/step - loss: 1.2819 - accuracy: 0.8421\n",
      "Epoch 5/10\n",
      "3975/3975 [==============================] - 25s 6ms/step - loss: 1.2484 - accuracy: 0.8445\n",
      "Epoch 6/10\n",
      "3975/3975 [==============================] - 25s 6ms/step - loss: 1.2191 - accuracy: 0.8456\n",
      "Epoch 7/10\n",
      "3975/3975 [==============================] - 25s 6ms/step - loss: 1.1971 - accuracy: 0.8490\n",
      "Epoch 8/10\n",
      "3975/3975 [==============================] - 25s 6ms/step - loss: 1.1749 - accuracy: 0.8489\n",
      "Epoch 9/10\n",
      "3975/3975 [==============================] - 25s 6ms/step - loss: 1.1573 - accuracy: 0.8498\n",
      "Epoch 10/10\n",
      "3975/3975 [==============================] - 25s 6ms/step - loss: 1.1390 - accuracy: 0.8537\n",
      "1026/1026 [==============================] - 3s 3ms/step - loss: 1.4615 - accuracy: 0.6840\n",
      "3975/3975 [==============================] - 12s 3ms/step - loss: 1.1078 - accuracy: 0.8501\n",
      "*** Building Jigsaw with up to 3x3 kernels\n",
      "Epoch 1/10\n",
      "3891/3891 [==============================] - 24s 6ms/step - loss: 1.5231 - accuracy: 0.7424\n",
      "Epoch 2/10\n",
      "3891/3891 [==============================] - 24s 6ms/step - loss: 1.4413 - accuracy: 0.7609\n",
      "Epoch 3/10\n",
      "3891/3891 [==============================] - 24s 6ms/step - loss: 1.3872 - accuracy: 0.7688\n",
      "Epoch 4/10\n",
      "3891/3891 [==============================] - 24s 6ms/step - loss: 1.3508 - accuracy: 0.7715\n",
      "Epoch 5/10\n",
      "3891/3891 [==============================] - 24s 6ms/step - loss: 1.3223 - accuracy: 0.7759\n",
      "Epoch 6/10\n",
      "3891/3891 [==============================] - 24s 6ms/step - loss: 1.2988 - accuracy: 0.7780\n",
      "Epoch 7/10\n",
      "3891/3891 [==============================] - 24s 6ms/step - loss: 1.2791 - accuracy: 0.7811\n",
      "Epoch 8/10\n",
      "3891/3891 [==============================] - 24s 6ms/step - loss: 1.2593 - accuracy: 0.7832\n",
      "Epoch 9/10\n",
      "3891/3891 [==============================] - 24s 6ms/step - loss: 1.2421 - accuracy: 0.7837\n",
      "Epoch 10/10\n",
      "3891/3891 [==============================] - 24s 6ms/step - loss: 1.2239 - accuracy: 0.7856\n",
      "1110/1110 [==============================] - 3s 3ms/step - loss: 1.0060 - accuracy: 0.9714\n",
      "3891/3891 [==============================] - 13s 3ms/step - loss: 1.2008 - accuracy: 0.7914\n",
      "*** Building Jigsaw with up to 3x3 kernels\n",
      "Epoch 1/10\n",
      "4122/4122 [==============================] - 26s 6ms/step - loss: 1.5483 - accuracy: 0.7188\n",
      "Epoch 2/10\n",
      "4122/4122 [==============================] - 26s 6ms/step - loss: 1.4690 - accuracy: 0.7562\n",
      "Epoch 3/10\n",
      "4122/4122 [==============================] - 25s 6ms/step - loss: 1.4158 - accuracy: 0.7715\n",
      "Epoch 4/10\n",
      "4122/4122 [==============================] - 25s 6ms/step - loss: 1.3679 - accuracy: 0.7815\n",
      "Epoch 5/10\n",
      "4122/4122 [==============================] - 26s 6ms/step - loss: 1.3318 - accuracy: 0.7895\n",
      "Epoch 6/10\n",
      "4122/4122 [==============================] - 25s 6ms/step - loss: 1.3020 - accuracy: 0.7956\n",
      "Epoch 7/10\n",
      "4122/4122 [==============================] - 26s 6ms/step - loss: 1.2754 - accuracy: 0.7982\n",
      "Epoch 8/10\n",
      "4122/4122 [==============================] - 26s 6ms/step - loss: 1.2522 - accuracy: 0.7999\n",
      "Epoch 9/10\n",
      "4122/4122 [==============================] - 26s 6ms/step - loss: 1.2326 - accuracy: 0.8022\n",
      "Epoch 10/10\n",
      "4122/4122 [==============================] - 26s 6ms/step - loss: 1.2119 - accuracy: 0.8042\n",
      "879/879 [==============================] - 3s 3ms/step - loss: 0.9767 - accuracy: 0.9191\n",
      "4122/4122 [==============================] - 12s 3ms/step - loss: 1.1849 - accuracy: 0.8167\n",
      "*** Building Jigsaw with up to 5x5 kernels\n",
      "Epoch 1/10\n",
      "3936/3936 [==============================] - 31s 8ms/step - loss: 1.5960 - accuracy: 0.7644\n",
      "Epoch 2/10\n",
      "3936/3936 [==============================] - 31s 8ms/step - loss: 1.4469 - accuracy: 0.8172\n",
      "Epoch 3/10\n",
      "3936/3936 [==============================] - 31s 8ms/step - loss: 1.3825 - accuracy: 0.8263\n",
      "Epoch 4/10\n",
      "3936/3936 [==============================] - 31s 8ms/step - loss: 1.3375 - accuracy: 0.8346\n",
      "Epoch 5/10\n",
      "3936/3936 [==============================] - 31s 8ms/step - loss: 1.3044 - accuracy: 0.8403\n",
      "Epoch 6/10\n",
      "3936/3936 [==============================] - 31s 8ms/step - loss: 1.2758 - accuracy: 0.8456\n",
      "Epoch 7/10\n",
      "3936/3936 [==============================] - 31s 8ms/step - loss: 1.2513 - accuracy: 0.8466\n",
      "Epoch 8/10\n",
      "3936/3936 [==============================] - 31s 8ms/step - loss: 1.2284 - accuracy: 0.8513\n",
      "Epoch 9/10\n",
      "3936/3936 [==============================] - 31s 8ms/step - loss: 1.2088 - accuracy: 0.8525\n",
      "Epoch 10/10\n",
      "3936/3936 [==============================] - 31s 8ms/step - loss: 1.1912 - accuracy: 0.8552\n",
      "1065/1065 [==============================] - 4s 4ms/step - loss: 1.4049 - accuracy: 0.7571\n",
      "3936/3936 [==============================] - 14s 4ms/step - loss: 1.1643 - accuracy: 0.8587\n",
      "*** Building Jigsaw with up to 5x5 kernels\n",
      "Epoch 1/10\n",
      "4079/4079 [==============================] - 31s 8ms/step - loss: 1.5237 - accuracy: 0.8203\n",
      "Epoch 2/10\n",
      "4079/4079 [==============================] - 31s 8ms/step - loss: 1.4267 - accuracy: 0.8357\n",
      "Epoch 3/10\n",
      "4079/4079 [==============================] - 31s 8ms/step - loss: 1.3690 - accuracy: 0.8428\n",
      "Epoch 4/10\n",
      "4079/4079 [==============================] - 31s 8ms/step - loss: 1.3274 - accuracy: 0.8465\n",
      "Epoch 5/10\n",
      "4079/4079 [==============================] - 32s 8ms/step - loss: 1.2945 - accuracy: 0.8500\n",
      "Epoch 6/10\n",
      "4079/4079 [==============================] - 31s 8ms/step - loss: 1.2716 - accuracy: 0.8506\n",
      "Epoch 7/10\n",
      "4079/4079 [==============================] - 31s 8ms/step - loss: 1.2473 - accuracy: 0.8540\n",
      "Epoch 8/10\n",
      "4079/4079 [==============================] - 31s 8ms/step - loss: 1.2239 - accuracy: 0.8526\n",
      "Epoch 9/10\n",
      "4079/4079 [==============================] - 31s 7ms/step - loss: 1.2056 - accuracy: 0.8534\n",
      "Epoch 10/10\n",
      "4079/4079 [==============================] - 31s 8ms/step - loss: 1.1859 - accuracy: 0.8550\n",
      "922/922 [==============================] - 3s 3ms/step - loss: 1.4773 - accuracy: 0.6646\n",
      "4079/4079 [==============================] - 15s 4ms/step - loss: 1.1581 - accuracy: 0.8592\n",
      "*** Building Jigsaw with up to 5x5 kernels\n",
      "Epoch 1/10\n",
      "3975/3975 [==============================] - 30s 8ms/step - loss: 1.5340 - accuracy: 0.8297\n",
      "Epoch 2/10\n",
      "3975/3975 [==============================] - 31s 8ms/step - loss: 1.4417 - accuracy: 0.8392\n",
      "Epoch 3/10\n",
      "3975/3975 [==============================] - 31s 8ms/step - loss: 1.3747 - accuracy: 0.8423\n",
      "Epoch 4/10\n",
      "3975/3975 [==============================] - 30s 8ms/step - loss: 1.3332 - accuracy: 0.8449\n",
      "Epoch 5/10\n",
      "3975/3975 [==============================] - 31s 8ms/step - loss: 1.3016 - accuracy: 0.8459\n",
      "Epoch 6/10\n",
      "3975/3975 [==============================] - 30s 8ms/step - loss: 1.2750 - accuracy: 0.8472\n",
      "Epoch 7/10\n",
      "3975/3975 [==============================] - 31s 8ms/step - loss: 1.2523 - accuracy: 0.8495\n",
      "Epoch 8/10\n",
      "3975/3975 [==============================] - 31s 8ms/step - loss: 1.2332 - accuracy: 0.8506\n",
      "Epoch 9/10\n",
      "3975/3975 [==============================] - 30s 8ms/step - loss: 1.2128 - accuracy: 0.8515\n",
      "Epoch 10/10\n",
      "3975/3975 [==============================] - 31s 8ms/step - loss: 1.1948 - accuracy: 0.8521\n",
      "1026/1026 [==============================] - 3s 3ms/step - loss: 1.4908 - accuracy: 0.7093\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3975/3975 [==============================] - 14s 3ms/step - loss: 1.1608 - accuracy: 0.8615\n",
      "*** Building Jigsaw with up to 5x5 kernels\n",
      "Epoch 1/10\n",
      "3891/3891 [==============================] - 31s 8ms/step - loss: 1.5888 - accuracy: 0.7389\n",
      "Epoch 2/10\n",
      "3891/3891 [==============================] - 30s 8ms/step - loss: 1.5022 - accuracy: 0.7598\n",
      "Epoch 3/10\n",
      "3891/3891 [==============================] - 30s 8ms/step - loss: 1.4535 - accuracy: 0.7667\n",
      "Epoch 4/10\n",
      "3891/3891 [==============================] - 30s 8ms/step - loss: 1.4183 - accuracy: 0.7723\n",
      "Epoch 5/10\n",
      "3891/3891 [==============================] - 30s 8ms/step - loss: 1.3907 - accuracy: 0.7752\n",
      "Epoch 6/10\n",
      "3891/3891 [==============================] - 30s 8ms/step - loss: 1.3658 - accuracy: 0.7797\n",
      "Epoch 7/10\n",
      "3891/3891 [==============================] - 30s 8ms/step - loss: 1.3444 - accuracy: 0.7821\n",
      "Epoch 8/10\n",
      "3891/3891 [==============================] - 31s 8ms/step - loss: 1.3231 - accuracy: 0.7846\n",
      "Epoch 9/10\n",
      "3891/3891 [==============================] - 30s 8ms/step - loss: 1.3040 - accuracy: 0.7870\n",
      "Epoch 10/10\n",
      "3891/3891 [==============================] - 31s 8ms/step - loss: 1.2843 - accuracy: 0.7899\n",
      "1110/1110 [==============================] - 4s 3ms/step - loss: 1.0674 - accuracy: 0.9764\n",
      "3891/3891 [==============================] - 13s 3ms/step - loss: 1.2604 - accuracy: 0.7956\n",
      "*** Building Jigsaw with up to 5x5 kernels\n",
      "Epoch 1/10\n",
      "4122/4122 [==============================] - 32s 8ms/step - loss: 1.6020 - accuracy: 0.7365\n",
      "Epoch 2/10\n",
      "4122/4122 [==============================] - 32s 8ms/step - loss: 1.5233 - accuracy: 0.7652\n",
      "Epoch 3/10\n",
      "4122/4122 [==============================] - 32s 8ms/step - loss: 1.4708 - accuracy: 0.7754\n",
      "Epoch 4/10\n",
      "4122/4122 [==============================] - 32s 8ms/step - loss: 1.4277 - accuracy: 0.7839\n",
      "Epoch 5/10\n",
      "4122/4122 [==============================] - 32s 8ms/step - loss: 1.3919 - accuracy: 0.7922\n",
      "Epoch 6/10\n",
      "4122/4122 [==============================] - 32s 8ms/step - loss: 1.3598 - accuracy: 0.7946\n",
      "Epoch 7/10\n",
      "4122/4122 [==============================] - 32s 8ms/step - loss: 1.3331 - accuracy: 0.7992\n",
      "Epoch 8/10\n",
      "4122/4122 [==============================] - 32s 8ms/step - loss: 1.3106 - accuracy: 0.8010\n",
      "Epoch 9/10\n",
      "4122/4122 [==============================] - 32s 8ms/step - loss: 1.2894 - accuracy: 0.8039\n",
      "Epoch 10/10\n",
      "4122/4122 [==============================] - 32s 8ms/step - loss: 1.2686 - accuracy: 0.8068\n",
      "879/879 [==============================] - 3s 3ms/step - loss: 1.0272 - accuracy: 0.9224\n",
      "4122/4122 [==============================] - 15s 4ms/step - loss: 1.2374 - accuracy: 0.8182\n",
      "*** Building Jigsaw with up to 5x5 kernels\n",
      "Epoch 1/10\n",
      "3936/3936 [==============================] - 30s 8ms/step - loss: 1.5426 - accuracy: 0.8000\n",
      "Epoch 2/10\n",
      "3936/3936 [==============================] - 30s 8ms/step - loss: 1.4449 - accuracy: 0.8146\n",
      "Epoch 3/10\n",
      "3936/3936 [==============================] - 32s 8ms/step - loss: 1.3874 - accuracy: 0.8254\n",
      "Epoch 4/10\n",
      "3936/3936 [==============================] - 30s 8ms/step - loss: 1.3479 - accuracy: 0.8316\n",
      "Epoch 5/10\n",
      "3936/3936 [==============================] - 30s 8ms/step - loss: 1.3141 - accuracy: 0.8361\n",
      "Epoch 6/10\n",
      "3936/3936 [==============================] - 30s 8ms/step - loss: 1.2863 - accuracy: 0.8412\n",
      "Epoch 7/10\n",
      "3936/3936 [==============================] - 30s 8ms/step - loss: 1.2599 - accuracy: 0.8435\n",
      "Epoch 8/10\n",
      "3936/3936 [==============================] - 30s 8ms/step - loss: 1.2396 - accuracy: 0.8462\n",
      "Epoch 9/10\n",
      "3936/3936 [==============================] - 31s 8ms/step - loss: 1.2190 - accuracy: 0.8480\n",
      "Epoch 10/10\n",
      "3936/3936 [==============================] - 30s 8ms/step - loss: 1.1987 - accuracy: 0.8504\n",
      "1065/1065 [==============================] - 4s 4ms/step - loss: 1.3988 - accuracy: 0.7569\n",
      "3936/3936 [==============================] - 14s 4ms/step - loss: 1.1693 - accuracy: 0.8593\n",
      "*** Building Jigsaw with up to 5x5 kernels\n",
      "Epoch 1/10\n",
      "4079/4079 [==============================] - 32s 8ms/step - loss: 1.5071 - accuracy: 0.8232\n",
      "Epoch 2/10\n",
      "4079/4079 [==============================] - 33s 8ms/step - loss: 1.4079 - accuracy: 0.8411\n",
      "Epoch 3/10\n",
      "4079/4079 [==============================] - 34s 8ms/step - loss: 1.3512 - accuracy: 0.8470\n",
      "Epoch 4/10\n",
      "4079/4079 [==============================] - 33s 8ms/step - loss: 1.3119 - accuracy: 0.8512\n",
      "Epoch 5/10\n",
      "4079/4079 [==============================] - 33s 8ms/step - loss: 1.2814 - accuracy: 0.8537\n",
      "Epoch 6/10\n",
      "4079/4079 [==============================] - 32s 8ms/step - loss: 1.2573 - accuracy: 0.8550\n",
      "Epoch 7/10\n",
      "4079/4079 [==============================] - 33s 8ms/step - loss: 1.2345 - accuracy: 0.8545\n",
      "Epoch 8/10\n",
      "4079/4079 [==============================] - 33s 8ms/step - loss: 1.2139 - accuracy: 0.8566\n",
      "Epoch 9/10\n",
      "4079/4079 [==============================] - 33s 8ms/step - loss: 1.1932 - accuracy: 0.8553\n",
      "Epoch 10/10\n",
      "4079/4079 [==============================] - 33s 8ms/step - loss: 1.1749 - accuracy: 0.8573\n",
      "922/922 [==============================] - 3s 3ms/step - loss: 1.4869 - accuracy: 0.6488\n",
      "4079/4079 [==============================] - 14s 3ms/step - loss: 1.1457 - accuracy: 0.8587\n",
      "*** Building Jigsaw with up to 5x5 kernels\n",
      "Epoch 1/10\n",
      "3975/3975 [==============================] - 32s 8ms/step - loss: 1.5358 - accuracy: 0.8159\n",
      "Epoch 2/10\n",
      "3975/3975 [==============================] - 33s 8ms/step - loss: 1.4289 - accuracy: 0.8382\n",
      "Epoch 3/10\n",
      "3975/3975 [==============================] - 32s 8ms/step - loss: 1.3676 - accuracy: 0.8412\n",
      "Epoch 4/10\n",
      "3975/3975 [==============================] - 33s 8ms/step - loss: 1.3255 - accuracy: 0.8460\n",
      "Epoch 5/10\n",
      "3975/3975 [==============================] - 32s 8ms/step - loss: 1.2948 - accuracy: 0.8487\n",
      "Epoch 6/10\n",
      "3975/3975 [==============================] - 33s 8ms/step - loss: 1.2706 - accuracy: 0.8501\n",
      "Epoch 7/10\n",
      "3975/3975 [==============================] - 32s 8ms/step - loss: 1.2506 - accuracy: 0.8506\n",
      "Epoch 8/10\n",
      "3975/3975 [==============================] - 32s 8ms/step - loss: 1.2292 - accuracy: 0.8519\n",
      "Epoch 9/10\n",
      "3975/3975 [==============================] - 32s 8ms/step - loss: 1.2105 - accuracy: 0.8546\n",
      "Epoch 10/10\n",
      "3975/3975 [==============================] - 32s 8ms/step - loss: 1.1933 - accuracy: 0.8546\n",
      "1026/1026 [==============================] - 4s 4ms/step - loss: 1.5100 - accuracy: 0.6996\n",
      "3975/3975 [==============================] - 14s 4ms/step - loss: 1.1619 - accuracy: 0.8546\n",
      "*** Building Jigsaw with up to 5x5 kernels\n",
      "Epoch 1/10\n",
      "3891/3891 [==============================] - 31s 8ms/step - loss: 1.6049 - accuracy: 0.7244\n",
      "Epoch 2/10\n",
      "3891/3891 [==============================] - 31s 8ms/step - loss: 1.5095 - accuracy: 0.7582\n",
      "Epoch 3/10\n",
      "3891/3891 [==============================] - 32s 8ms/step - loss: 1.4619 - accuracy: 0.7652\n",
      "Epoch 4/10\n",
      "3891/3891 [==============================] - 32s 8ms/step - loss: 1.4283 - accuracy: 0.7686\n",
      "Epoch 5/10\n",
      "3891/3891 [==============================] - 31s 8ms/step - loss: 1.4028 - accuracy: 0.7712\n",
      "Epoch 6/10\n",
      "3891/3891 [==============================] - 32s 8ms/step - loss: 1.3773 - accuracy: 0.7753\n",
      "Epoch 7/10\n",
      "3891/3891 [==============================] - 33s 9ms/step - loss: 1.3553 - accuracy: 0.7774\n",
      "Epoch 8/10\n",
      "3891/3891 [==============================] - 32s 8ms/step - loss: 1.3325 - accuracy: 0.7829\n",
      "Epoch 9/10\n",
      "3891/3891 [==============================] - 31s 8ms/step - loss: 1.3126 - accuracy: 0.7853\n",
      "Epoch 10/10\n",
      "3891/3891 [==============================] - 32s 8ms/step - loss: 1.2947 - accuracy: 0.7891\n",
      "1110/1110 [==============================] - 4s 4ms/step - loss: 1.0910 - accuracy: 0.9561\n",
      "3891/3891 [==============================] - 15s 4ms/step - loss: 1.2695 - accuracy: 0.7937\n",
      "*** Building Jigsaw with up to 5x5 kernels\n",
      "Epoch 1/10\n",
      "4122/4122 [==============================] - 34s 8ms/step - loss: 1.6003 - accuracy: 0.7431\n",
      "Epoch 2/10\n",
      "4122/4122 [==============================] - 34s 8ms/step - loss: 1.5189 - accuracy: 0.7694\n",
      "Epoch 3/10\n",
      "4122/4122 [==============================] - 34s 8ms/step - loss: 1.4630 - accuracy: 0.7804\n",
      "Epoch 4/10\n",
      "4122/4122 [==============================] - 33s 8ms/step - loss: 1.4169 - accuracy: 0.7904\n",
      "Epoch 5/10\n",
      "4122/4122 [==============================] - 33s 8ms/step - loss: 1.3833 - accuracy: 0.7939\n",
      "Epoch 6/10\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4122/4122 [==============================] - 33s 8ms/step - loss: 1.3568 - accuracy: 0.7988\n",
      "Epoch 7/10\n",
      "4122/4122 [==============================] - 34s 8ms/step - loss: 1.3309 - accuracy: 0.8009\n",
      "Epoch 8/10\n",
      "4122/4122 [==============================] - 32s 8ms/step - loss: 1.3104 - accuracy: 0.8018\n",
      "Epoch 9/10\n",
      "4122/4122 [==============================] - 31s 8ms/step - loss: 1.2893 - accuracy: 0.8046\n",
      "Epoch 10/10\n",
      "4122/4122 [==============================] - 31s 7ms/step - loss: 1.2679 - accuracy: 0.8065\n",
      "879/879 [==============================] - 2s 3ms/step - loss: 1.0244 - accuracy: 0.9447\n",
      "4122/4122 [==============================] - 12s 3ms/step - loss: 1.2424 - accuracy: 0.8158\n",
      "*** Building Jigsaw with up to 7x7 kernels\n",
      "Epoch 1/10\n",
      "3936/3936 [==============================] - 40s 10ms/step - loss: 1.6220 - accuracy: 0.7914\n",
      "Epoch 2/10\n",
      "3936/3936 [==============================] - 39s 10ms/step - loss: 1.5140 - accuracy: 0.8176\n",
      "Epoch 3/10\n",
      "3936/3936 [==============================] - 40s 10ms/step - loss: 1.4547 - accuracy: 0.8267\n",
      "Epoch 4/10\n",
      "3936/3936 [==============================] - 39s 10ms/step - loss: 1.4106 - accuracy: 0.8335\n",
      "Epoch 5/10\n",
      "3936/3936 [==============================] - 41s 10ms/step - loss: 1.3766 - accuracy: 0.8387\n",
      "Epoch 6/10\n",
      "3936/3936 [==============================] - 40s 10ms/step - loss: 1.3477 - accuracy: 0.8415\n",
      "Epoch 7/10\n",
      "3936/3936 [==============================] - 40s 10ms/step - loss: 1.3218 - accuracy: 0.8442\n",
      "Epoch 8/10\n",
      "3936/3936 [==============================] - 40s 10ms/step - loss: 1.2954 - accuracy: 0.8463\n",
      "Epoch 9/10\n",
      "3936/3936 [==============================] - 38s 10ms/step - loss: 1.2749 - accuracy: 0.8478\n",
      "Epoch 10/10\n",
      "3936/3936 [==============================] - 38s 10ms/step - loss: 1.2548 - accuracy: 0.8515\n",
      "1065/1065 [==============================] - 5s 4ms/step - loss: 1.4442 - accuracy: 0.7600\n",
      "3936/3936 [==============================] - 18s 5ms/step - loss: 1.2243 - accuracy: 0.8549\n",
      "*** Building Jigsaw with up to 7x7 kernels\n",
      "Epoch 1/10\n",
      "4079/4079 [==============================] - 41s 10ms/step - loss: 1.6351 - accuracy: 0.8054\n",
      "Epoch 2/10\n",
      "4079/4079 [==============================] - 41s 10ms/step - loss: 1.5305 - accuracy: 0.8288\n",
      "Epoch 3/10\n",
      "4079/4079 [==============================] - 41s 10ms/step - loss: 1.4694 - accuracy: 0.8362\n",
      "Epoch 4/10\n",
      "4079/4079 [==============================] - 40s 10ms/step - loss: 1.4235 - accuracy: 0.8399\n",
      "Epoch 5/10\n",
      "4079/4079 [==============================] - 38s 9ms/step - loss: 1.3890 - accuracy: 0.8445\n",
      "Epoch 6/10\n",
      "4079/4079 [==============================] - 38s 9ms/step - loss: 1.3593 - accuracy: 0.8446\n",
      "Epoch 7/10\n",
      "4079/4079 [==============================] - 40s 10ms/step - loss: 1.3319 - accuracy: 0.8478\n",
      "Epoch 8/10\n",
      "4079/4079 [==============================] - 41s 10ms/step - loss: 1.3057 - accuracy: 0.8487\n",
      "Epoch 9/10\n",
      "4079/4079 [==============================] - 40s 10ms/step - loss: 1.2832 - accuracy: 0.8504\n",
      "Epoch 10/10\n",
      "4079/4079 [==============================] - 41s 10ms/step - loss: 1.2611 - accuracy: 0.8503\n",
      "922/922 [==============================] - 4s 4ms/step - loss: 1.5271 - accuracy: 0.6644\n",
      "4079/4079 [==============================] - 18s 4ms/step - loss: 1.2234 - accuracy: 0.8588\n",
      "*** Building Jigsaw with up to 7x7 kernels\n",
      "Epoch 1/10\n",
      "3975/3975 [==============================] - 41s 10ms/step - loss: 1.5826 - accuracy: 0.8239\n",
      "Epoch 2/10\n",
      "3975/3975 [==============================] - 40s 10ms/step - loss: 1.4812 - accuracy: 0.8393\n",
      "Epoch 3/10\n",
      "3975/3975 [==============================] - 42s 11ms/step - loss: 1.4257 - accuracy: 0.8437\n",
      "Epoch 4/10\n",
      "3975/3975 [==============================] - 40s 10ms/step - loss: 1.3913 - accuracy: 0.8469\n",
      "Epoch 5/10\n",
      "3975/3975 [==============================] - 40s 10ms/step - loss: 1.3601 - accuracy: 0.8494\n",
      "Epoch 6/10\n",
      "3975/3975 [==============================] - 40s 10ms/step - loss: 1.3382 - accuracy: 0.8517\n",
      "Epoch 7/10\n",
      "3975/3975 [==============================] - 42s 10ms/step - loss: 1.3132 - accuracy: 0.8537\n",
      "Epoch 8/10\n",
      "3975/3975 [==============================] - 39s 10ms/step - loss: 1.2926 - accuracy: 0.8574\n",
      "Epoch 9/10\n",
      "3975/3975 [==============================] - 41s 10ms/step - loss: 1.2710 - accuracy: 0.8567\n",
      "Epoch 10/10\n",
      "3975/3975 [==============================] - 41s 10ms/step - loss: 1.2509 - accuracy: 0.8570\n",
      "1026/1026 [==============================] - 4s 4ms/step - loss: 1.5827 - accuracy: 0.7078\n",
      "3975/3975 [==============================] - 18s 5ms/step - loss: 1.2218 - accuracy: 0.8660\n",
      "*** Building Jigsaw with up to 7x7 kernels\n",
      "Epoch 1/10\n",
      "3891/3891 [==============================] - 38s 10ms/step - loss: 1.6840 - accuracy: 0.7339\n",
      "Epoch 2/10\n",
      "3891/3891 [==============================] - 40s 10ms/step - loss: 1.5814 - accuracy: 0.7625\n",
      "Epoch 3/10\n",
      "3891/3891 [==============================] - 39s 10ms/step - loss: 1.5307 - accuracy: 0.7689\n",
      "Epoch 4/10\n",
      "3891/3891 [==============================] - 39s 10ms/step - loss: 1.4959 - accuracy: 0.7714\n",
      "Epoch 5/10\n",
      "3891/3891 [==============================] - 39s 10ms/step - loss: 1.4673 - accuracy: 0.7765\n",
      "Epoch 6/10\n",
      "3891/3891 [==============================] - 39s 10ms/step - loss: 1.4406 - accuracy: 0.7793\n",
      "Epoch 7/10\n",
      "3891/3891 [==============================] - 39s 10ms/step - loss: 1.4178 - accuracy: 0.7830\n",
      "Epoch 8/10\n",
      "3891/3891 [==============================] - 39s 10ms/step - loss: 1.3962 - accuracy: 0.7865\n",
      "Epoch 9/10\n",
      "3891/3891 [==============================] - 39s 10ms/step - loss: 1.3747 - accuracy: 0.7893\n",
      "Epoch 10/10\n",
      "3891/3891 [==============================] - 40s 10ms/step - loss: 1.3542 - accuracy: 0.7929\n",
      "1110/1110 [==============================] - 6s 5ms/step - loss: 1.1307 - accuracy: 0.9749\n",
      "3891/3891 [==============================] - 17s 4ms/step - loss: 1.3291 - accuracy: 0.7994\n",
      "*** Building Jigsaw with up to 7x7 kernels\n",
      "Epoch 1/10\n",
      "4122/4122 [==============================] - 42s 10ms/step - loss: 1.6981 - accuracy: 0.7130\n",
      "Epoch 2/10\n",
      "4122/4122 [==============================] - 43s 10ms/step - loss: 1.5985 - accuracy: 0.7650\n",
      "Epoch 3/10\n",
      "4122/4122 [==============================] - 43s 10ms/step - loss: 1.5406 - accuracy: 0.7821\n",
      "Epoch 4/10\n",
      "4122/4122 [==============================] - 43s 10ms/step - loss: 1.4977 - accuracy: 0.7899\n",
      "Epoch 5/10\n",
      "4122/4122 [==============================] - 44s 11ms/step - loss: 1.4628 - accuracy: 0.7955\n",
      "Epoch 6/10\n",
      "4122/4122 [==============================] - 41s 10ms/step - loss: 1.4321 - accuracy: 0.7987\n",
      "Epoch 7/10\n",
      "4122/4122 [==============================] - 41s 10ms/step - loss: 1.4060 - accuracy: 0.8018\n",
      "Epoch 8/10\n",
      "4122/4122 [==============================] - 41s 10ms/step - loss: 1.3808 - accuracy: 0.8053\n",
      "Epoch 9/10\n",
      "4122/4122 [==============================] - 41s 10ms/step - loss: 1.3591 - accuracy: 0.8110\n",
      "Epoch 10/10\n",
      "4122/4122 [==============================] - 41s 10ms/step - loss: 1.3362 - accuracy: 0.8117\n",
      "879/879 [==============================] - 4s 5ms/step - loss: 1.1028 - accuracy: 0.9394\n",
      "4122/4122 [==============================] - 18s 4ms/step - loss: 1.3068 - accuracy: 0.8231\n",
      "*** Building Jigsaw with up to 7x7 kernels\n",
      "Epoch 1/10\n",
      "3936/3936 [==============================] - 39s 10ms/step - loss: 1.6104 - accuracy: 0.7923\n",
      "Epoch 2/10\n",
      "3936/3936 [==============================] - 39s 10ms/step - loss: 1.5039 - accuracy: 0.8189\n",
      "Epoch 3/10\n",
      "3936/3936 [==============================] - 39s 10ms/step - loss: 1.4468 - accuracy: 0.8272\n",
      "Epoch 4/10\n",
      "3936/3936 [==============================] - 39s 10ms/step - loss: 1.4077 - accuracy: 0.8337\n",
      "Epoch 5/10\n",
      "3936/3936 [==============================] - 40s 10ms/step - loss: 1.3731 - accuracy: 0.8392\n",
      "Epoch 6/10\n",
      "3936/3936 [==============================] - 39s 10ms/step - loss: 1.3465 - accuracy: 0.8422\n",
      "Epoch 7/10\n",
      "3936/3936 [==============================] - 40s 10ms/step - loss: 1.3196 - accuracy: 0.8454\n",
      "Epoch 8/10\n",
      "3936/3936 [==============================] - 40s 10ms/step - loss: 1.2977 - accuracy: 0.8476\n",
      "Epoch 9/10\n",
      "3936/3936 [==============================] - 39s 10ms/step - loss: 1.2747 - accuracy: 0.8490\n",
      "Epoch 10/10\n",
      "3936/3936 [==============================] - 39s 10ms/step - loss: 1.2533 - accuracy: 0.8519\n",
      "1065/1065 [==============================] - 4s 4ms/step - loss: 1.4504 - accuracy: 0.7557\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3936/3936 [==============================] - 17s 4ms/step - loss: 1.2247 - accuracy: 0.8602\n",
      "*** Building Jigsaw with up to 7x7 kernels\n",
      "Epoch 1/10\n",
      "4079/4079 [==============================] - 40s 10ms/step - loss: 1.6006 - accuracy: 0.8077\n",
      "Epoch 2/10\n",
      "4079/4079 [==============================] - 41s 10ms/step - loss: 1.4925 - accuracy: 0.8356\n",
      "Epoch 3/10\n",
      "4079/4079 [==============================] - 43s 10ms/step - loss: 1.4323 - accuracy: 0.8422\n",
      "Epoch 4/10\n",
      "4079/4079 [==============================] - 41s 10ms/step - loss: 1.3918 - accuracy: 0.8476\n",
      "Epoch 5/10\n",
      "4079/4079 [==============================] - 41s 10ms/step - loss: 1.3583 - accuracy: 0.8510\n",
      "Epoch 6/10\n",
      "4079/4079 [==============================] - 42s 10ms/step - loss: 1.3320 - accuracy: 0.8529\n",
      "Epoch 7/10\n",
      "4079/4079 [==============================] - 42s 10ms/step - loss: 1.3049 - accuracy: 0.8539\n",
      "Epoch 8/10\n",
      "4079/4079 [==============================] - 42s 10ms/step - loss: 1.2788 - accuracy: 0.8548\n",
      "Epoch 9/10\n",
      "4079/4079 [==============================] - 42s 10ms/step - loss: 1.2604 - accuracy: 0.8565\n",
      "Epoch 10/10\n",
      "4079/4079 [==============================] - 42s 10ms/step - loss: 1.2378 - accuracy: 0.8583\n",
      "922/922 [==============================] - 4s 4ms/step - loss: 1.5589 - accuracy: 0.6601\n",
      "4079/4079 [==============================] - 18s 4ms/step - loss: 1.2047 - accuracy: 0.8604\n",
      "*** Building Jigsaw with up to 7x7 kernels\n",
      "Epoch 1/10\n",
      "3975/3975 [==============================] - 40s 10ms/step - loss: 1.6089 - accuracy: 0.8157\n",
      "Epoch 2/10\n",
      "3975/3975 [==============================] - 41s 10ms/step - loss: 1.4915 - accuracy: 0.8397\n",
      "Epoch 3/10\n",
      "3975/3975 [==============================] - 40s 10ms/step - loss: 1.4348 - accuracy: 0.8432\n",
      "Epoch 4/10\n",
      "3975/3975 [==============================] - 40s 10ms/step - loss: 1.3930 - accuracy: 0.8478\n",
      "Epoch 5/10\n",
      "3975/3975 [==============================] - 41s 10ms/step - loss: 1.3607 - accuracy: 0.8495\n",
      "Epoch 6/10\n",
      "3975/3975 [==============================] - 42s 11ms/step - loss: 1.3326 - accuracy: 0.8529\n",
      "Epoch 7/10\n",
      "3975/3975 [==============================] - 40s 10ms/step - loss: 1.3101 - accuracy: 0.8537\n",
      "Epoch 8/10\n",
      "3975/3975 [==============================] - 41s 10ms/step - loss: 1.2884 - accuracy: 0.8549\n",
      "Epoch 9/10\n",
      "3975/3975 [==============================] - 41s 10ms/step - loss: 1.2673 - accuracy: 0.8563\n",
      "Epoch 10/10\n",
      "3975/3975 [==============================] - 41s 10ms/step - loss: 1.2469 - accuracy: 0.8579\n",
      "1026/1026 [==============================] - 5s 5ms/step - loss: 1.6131 - accuracy: 0.7045\n",
      "3975/3975 [==============================] - 18s 5ms/step - loss: 1.2180 - accuracy: 0.8575\n",
      "*** Building Jigsaw with up to 7x7 kernels\n",
      "Epoch 1/10\n",
      "3891/3891 [==============================] - 41s 11ms/step - loss: 1.6615 - accuracy: 0.7395\n",
      "Epoch 2/10\n",
      "3891/3891 [==============================] - 39s 10ms/step - loss: 1.5715 - accuracy: 0.7588\n",
      "Epoch 3/10\n",
      "3891/3891 [==============================] - 41s 11ms/step - loss: 1.5227 - accuracy: 0.7670\n",
      "Epoch 4/10\n",
      "3891/3891 [==============================] - 41s 11ms/step - loss: 1.4869 - accuracy: 0.7714\n",
      "Epoch 5/10\n",
      "3891/3891 [==============================] - 41s 11ms/step - loss: 1.4575 - accuracy: 0.7750\n",
      "Epoch 6/10\n",
      "3891/3891 [==============================] - 41s 11ms/step - loss: 1.4309 - accuracy: 0.7814\n",
      "Epoch 7/10\n",
      "3891/3891 [==============================] - 41s 11ms/step - loss: 1.4077 - accuracy: 0.7840\n",
      "Epoch 8/10\n",
      "3891/3891 [==============================] - 41s 10ms/step - loss: 1.3833 - accuracy: 0.7863\n",
      "Epoch 9/10\n",
      "3891/3891 [==============================] - 41s 11ms/step - loss: 1.3631 - accuracy: 0.7895\n",
      "Epoch 10/10\n",
      "3891/3891 [==============================] - 41s 11ms/step - loss: 1.3427 - accuracy: 0.7927\n",
      "1110/1110 [==============================] - 5s 4ms/step - loss: 1.1320 - accuracy: 0.9651\n",
      "3891/3891 [==============================] - 18s 4ms/step - loss: 1.3170 - accuracy: 0.7978\n",
      "*** Building Jigsaw with up to 7x7 kernels\n",
      "Epoch 1/10\n",
      "4122/4122 [==============================] - 42s 10ms/step - loss: 1.6921 - accuracy: 0.7243\n",
      "Epoch 2/10\n",
      "4122/4122 [==============================] - 43s 10ms/step - loss: 1.5973 - accuracy: 0.7666\n",
      "Epoch 3/10\n",
      "4122/4122 [==============================] - 44s 11ms/step - loss: 1.5420 - accuracy: 0.7810\n",
      "Epoch 4/10\n",
      "4122/4122 [==============================] - 42s 10ms/step - loss: 1.4940 - accuracy: 0.7890\n",
      "Epoch 5/10\n",
      "4122/4122 [==============================] - 42s 10ms/step - loss: 1.4580 - accuracy: 0.7951\n",
      "Epoch 6/10\n",
      "4122/4122 [==============================] - 41s 10ms/step - loss: 1.4276 - accuracy: 0.8001\n",
      "Epoch 7/10\n",
      "4122/4122 [==============================] - 42s 10ms/step - loss: 1.4000 - accuracy: 0.8016\n",
      "Epoch 8/10\n",
      "4122/4122 [==============================] - 42s 10ms/step - loss: 1.3759 - accuracy: 0.8059\n",
      "Epoch 9/10\n",
      "4122/4122 [==============================] - 42s 10ms/step - loss: 1.3536 - accuracy: 0.8093\n",
      "Epoch 10/10\n",
      "4122/4122 [==============================] - 42s 10ms/step - loss: 1.3312 - accuracy: 0.8136\n",
      "879/879 [==============================] - 4s 4ms/step - loss: 1.1002 - accuracy: 0.9293\n",
      "4122/4122 [==============================] - 18s 4ms/step - loss: 1.3015 - accuracy: 0.8260\n",
      "*** Building Jigsaw with up to 9x9 kernels\n",
      "Epoch 1/10\n",
      "3936/3936 [==============================] - 46s 12ms/step - loss: 1.7089 - accuracy: 0.7849\n",
      "Epoch 2/10\n",
      "3936/3936 [==============================] - 47s 12ms/step - loss: 1.5941 - accuracy: 0.8115\n",
      "Epoch 3/10\n",
      "3936/3936 [==============================] - 46s 12ms/step - loss: 1.5307 - accuracy: 0.8214\n",
      "Epoch 4/10\n",
      "3936/3936 [==============================] - 46s 12ms/step - loss: 1.4825 - accuracy: 0.8324\n",
      "Epoch 5/10\n",
      "3936/3936 [==============================] - 47s 12ms/step - loss: 1.4465 - accuracy: 0.8355\n",
      "Epoch 6/10\n",
      "3936/3936 [==============================] - 46s 12ms/step - loss: 1.4133 - accuracy: 0.8401\n",
      "Epoch 7/10\n",
      "3936/3936 [==============================] - 46s 12ms/step - loss: 1.3852 - accuracy: 0.8451\n",
      "Epoch 8/10\n",
      "3936/3936 [==============================] - 46s 12ms/step - loss: 1.3588 - accuracy: 0.8473\n",
      "Epoch 9/10\n",
      "3936/3936 [==============================] - 46s 12ms/step - loss: 1.3357 - accuracy: 0.8509\n",
      "Epoch 10/10\n",
      "3936/3936 [==============================] - 47s 12ms/step - loss: 1.3148 - accuracy: 0.8516\n",
      "1065/1065 [==============================] - 6s 6ms/step - loss: 1.5174 - accuracy: 0.7611\n",
      "3936/3936 [==============================] - 19s 5ms/step - loss: 1.2838 - accuracy: 0.8564\n",
      "*** Building Jigsaw with up to 9x9 kernels\n",
      "Epoch 1/10\n",
      "4079/4079 [==============================] - 47s 11ms/step - loss: 1.6596 - accuracy: 0.8308\n",
      "Epoch 2/10\n",
      "4079/4079 [==============================] - 48s 12ms/step - loss: 1.5597 - accuracy: 0.8384\n",
      "Epoch 3/10\n",
      "4079/4079 [==============================] - 48s 12ms/step - loss: 1.4978 - accuracy: 0.8455\n",
      "Epoch 4/10\n",
      "4079/4079 [==============================] - 47s 12ms/step - loss: 1.4531 - accuracy: 0.8486\n",
      "Epoch 5/10\n",
      "4079/4079 [==============================] - 48s 12ms/step - loss: 1.4188 - accuracy: 0.8520\n",
      "Epoch 6/10\n",
      "4079/4079 [==============================] - 48s 12ms/step - loss: 1.3906 - accuracy: 0.8535\n",
      "Epoch 7/10\n",
      "4079/4079 [==============================] - 47s 11ms/step - loss: 1.3633 - accuracy: 0.8538\n",
      "Epoch 8/10\n",
      "4079/4079 [==============================] - 48s 12ms/step - loss: 1.3389 - accuracy: 0.8560\n",
      "Epoch 9/10\n",
      "4079/4079 [==============================] - 47s 12ms/step - loss: 1.3171 - accuracy: 0.8553\n",
      "Epoch 10/10\n",
      "4079/4079 [==============================] - 49s 12ms/step - loss: 1.2933 - accuracy: 0.8583\n",
      "922/922 [==============================] - 5s 5ms/step - loss: 1.6035 - accuracy: 0.6394\n",
      "4079/4079 [==============================] - 22s 5ms/step - loss: 1.2650 - accuracy: 0.8592\n",
      "*** Building Jigsaw with up to 9x9 kernels\n",
      "Epoch 1/10\n",
      "3975/3975 [==============================] - 47s 12ms/step - loss: 1.6823 - accuracy: 0.8102\n",
      "Epoch 2/10\n",
      "3975/3975 [==============================] - 46s 12ms/step - loss: 1.5705 - accuracy: 0.8368\n",
      "Epoch 3/10\n",
      "3975/3975 [==============================] - 46s 12ms/step - loss: 1.5084 - accuracy: 0.8422\n",
      "Epoch 4/10\n",
      "3975/3975 [==============================] - 45s 11ms/step - loss: 1.4672 - accuracy: 0.8456\n",
      "Epoch 5/10\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3975/3975 [==============================] - 46s 12ms/step - loss: 1.4333 - accuracy: 0.8478\n",
      "Epoch 6/10\n",
      "3975/3975 [==============================] - 45s 11ms/step - loss: 1.4062 - accuracy: 0.8500\n",
      "Epoch 7/10\n",
      "3975/3975 [==============================] - 44s 11ms/step - loss: 1.3824 - accuracy: 0.8508\n",
      "Epoch 8/10\n",
      "3975/3975 [==============================] - 44s 11ms/step - loss: 1.3597 - accuracy: 0.8533\n",
      "Epoch 9/10\n",
      "3975/3975 [==============================] - 45s 11ms/step - loss: 1.3374 - accuracy: 0.8555\n",
      "Epoch 10/10\n",
      "3975/3975 [==============================] - 45s 11ms/step - loss: 1.3167 - accuracy: 0.8552\n",
      "1026/1026 [==============================] - 5s 5ms/step - loss: 1.5974 - accuracy: 0.7074\n",
      "3975/3975 [==============================] - 20s 5ms/step - loss: 1.2827 - accuracy: 0.8666\n",
      "*** Building Jigsaw with up to 9x9 kernels\n",
      "Epoch 1/10\n",
      "3891/3891 [==============================] - 44s 11ms/step - loss: 1.7540 - accuracy: 0.7266\n",
      "Epoch 2/10\n",
      "3891/3891 [==============================] - 45s 11ms/step - loss: 1.6510 - accuracy: 0.7582\n",
      "Epoch 3/10\n",
      "3891/3891 [==============================] - 47s 12ms/step - loss: 1.6011 - accuracy: 0.7681\n",
      "Epoch 4/10\n",
      "3891/3891 [==============================] - 46s 12ms/step - loss: 1.5634 - accuracy: 0.7699\n",
      "Epoch 5/10\n",
      "3891/3891 [==============================] - 47s 12ms/step - loss: 1.5302 - accuracy: 0.7749\n",
      "Epoch 6/10\n",
      "3891/3891 [==============================] - 47s 12ms/step - loss: 1.5007 - accuracy: 0.7783\n",
      "Epoch 7/10\n",
      "3891/3891 [==============================] - 45s 12ms/step - loss: 1.4758 - accuracy: 0.7844\n",
      "Epoch 8/10\n",
      "3891/3891 [==============================] - 47s 12ms/step - loss: 1.4499 - accuracy: 0.7848\n",
      "Epoch 9/10\n",
      "3891/3891 [==============================] - 46s 12ms/step - loss: 1.4272 - accuracy: 0.7900\n",
      "Epoch 10/10\n",
      "3891/3891 [==============================] - 46s 12ms/step - loss: 1.4046 - accuracy: 0.7939\n",
      "1110/1110 [==============================] - 6s 5ms/step - loss: 1.2077 - accuracy: 0.9529\n",
      "3891/3891 [==============================] - 19s 5ms/step - loss: 1.3785 - accuracy: 0.8015\n",
      "*** Building Jigsaw with up to 9x9 kernels\n",
      "Epoch 1/10\n",
      "4122/4122 [==============================] - 48s 12ms/step - loss: 1.7506 - accuracy: 0.7297\n",
      "Epoch 2/10\n",
      "4122/4122 [==============================] - 47s 11ms/step - loss: 1.6673 - accuracy: 0.7671\n",
      "Epoch 3/10\n",
      "4122/4122 [==============================] - 48s 12ms/step - loss: 1.6031 - accuracy: 0.7806\n",
      "Epoch 4/10\n",
      "4122/4122 [==============================] - 47s 11ms/step - loss: 1.5550 - accuracy: 0.7880\n",
      "Epoch 5/10\n",
      "4122/4122 [==============================] - 48s 12ms/step - loss: 1.5155 - accuracy: 0.7947\n",
      "Epoch 6/10\n",
      "4122/4122 [==============================] - 49s 12ms/step - loss: 1.4834 - accuracy: 0.7980\n",
      "Epoch 7/10\n",
      "4122/4122 [==============================] - 48s 12ms/step - loss: 1.4553 - accuracy: 0.8015\n",
      "Epoch 8/10\n",
      "4122/4122 [==============================] - 48s 12ms/step - loss: 1.4305 - accuracy: 0.8037\n",
      "Epoch 9/10\n",
      "4122/4122 [==============================] - 47s 11ms/step - loss: 1.4052 - accuracy: 0.8074\n",
      "Epoch 10/10\n",
      "4122/4122 [==============================] - 47s 11ms/step - loss: 1.3833 - accuracy: 0.8098\n",
      "879/879 [==============================] - 4s 5ms/step - loss: 1.1604 - accuracy: 0.9200\n",
      "4122/4122 [==============================] - 20s 5ms/step - loss: 1.3533 - accuracy: 0.8199\n",
      "*** Building Jigsaw with up to 9x9 kernels\n",
      "Epoch 1/10\n",
      "3936/3936 [==============================] - 44s 11ms/step - loss: 1.6925 - accuracy: 0.7848\n",
      "Epoch 2/10\n",
      "3936/3936 [==============================] - 45s 11ms/step - loss: 1.5884 - accuracy: 0.8121\n",
      "Epoch 3/10\n",
      "3936/3936 [==============================] - 44s 11ms/step - loss: 1.5278 - accuracy: 0.8256\n",
      "Epoch 4/10\n",
      "3936/3936 [==============================] - 42s 11ms/step - loss: 1.4817 - accuracy: 0.8327\n",
      "Epoch 5/10\n",
      "3936/3936 [==============================] - 44s 11ms/step - loss: 1.4424 - accuracy: 0.8401\n",
      "Epoch 6/10\n",
      "3936/3936 [==============================] - 44s 11ms/step - loss: 1.4119 - accuracy: 0.8421\n",
      "Epoch 7/10\n",
      "3936/3936 [==============================] - 43s 11ms/step - loss: 1.3811 - accuracy: 0.8475\n",
      "Epoch 8/10\n",
      "3936/3936 [==============================] - 40s 10ms/step - loss: 1.3577 - accuracy: 0.8467\n",
      "Epoch 9/10\n",
      "3936/3936 [==============================] - 43s 11ms/step - loss: 1.3336 - accuracy: 0.8525\n",
      "Epoch 10/10\n",
      "3936/3936 [==============================] - 43s 11ms/step - loss: 1.3100 - accuracy: 0.8550\n",
      "1065/1065 [==============================] - 5s 5ms/step - loss: 1.5327 - accuracy: 0.7537\n",
      "3936/3936 [==============================] - 20s 5ms/step - loss: 1.2815 - accuracy: 0.8607\n",
      "*** Building Jigsaw with up to 9x9 kernels\n",
      "Epoch 1/10\n",
      "4079/4079 [==============================] - 47s 11ms/step - loss: 1.6876 - accuracy: 0.8154\n",
      "Epoch 2/10\n",
      "4079/4079 [==============================] - 46s 11ms/step - loss: 1.5862 - accuracy: 0.8304\n",
      "Epoch 3/10\n",
      "4079/4079 [==============================] - 45s 11ms/step - loss: 1.5170 - accuracy: 0.8391\n",
      "Epoch 4/10\n",
      "4079/4079 [==============================] - 46s 11ms/step - loss: 1.4697 - accuracy: 0.8434\n",
      "Epoch 5/10\n",
      "4079/4079 [==============================] - 45s 11ms/step - loss: 1.4328 - accuracy: 0.8480\n",
      "Epoch 6/10\n",
      "4079/4079 [==============================] - 45s 11ms/step - loss: 1.4023 - accuracy: 0.8485\n",
      "Epoch 7/10\n",
      "4079/4079 [==============================] - 45s 11ms/step - loss: 1.3712 - accuracy: 0.8511\n",
      "Epoch 8/10\n",
      "4079/4079 [==============================] - 46s 11ms/step - loss: 1.3464 - accuracy: 0.8518\n",
      "Epoch 9/10\n",
      "4079/4079 [==============================] - 46s 11ms/step - loss: 1.3213 - accuracy: 0.8530\n",
      "Epoch 10/10\n",
      "4079/4079 [==============================] - 48s 12ms/step - loss: 1.3018 - accuracy: 0.8552\n",
      "922/922 [==============================] - 5s 6ms/step - loss: 1.6020 - accuracy: 0.6679\n",
      "4079/4079 [==============================] - 21s 5ms/step - loss: 1.2643 - accuracy: 0.8590\n",
      "*** Building Jigsaw with up to 9x9 kernels\n",
      "Epoch 1/10\n",
      "3975/3975 [==============================] - 45s 11ms/step - loss: 1.6711 - accuracy: 0.8192\n",
      "Epoch 2/10\n",
      "3975/3975 [==============================] - 45s 11ms/step - loss: 1.5637 - accuracy: 0.8404\n",
      "Epoch 3/10\n",
      "3975/3975 [==============================] - 46s 11ms/step - loss: 1.5015 - accuracy: 0.8429\n",
      "Epoch 4/10\n",
      "3975/3975 [==============================] - 46s 12ms/step - loss: 1.4584 - accuracy: 0.8455\n",
      "Epoch 5/10\n",
      "3975/3975 [==============================] - 45s 11ms/step - loss: 1.4282 - accuracy: 0.8479\n",
      "Epoch 6/10\n",
      "3975/3975 [==============================] - 45s 11ms/step - loss: 1.3980 - accuracy: 0.8518\n",
      "Epoch 7/10\n",
      "3975/3975 [==============================] - 45s 11ms/step - loss: 1.3735 - accuracy: 0.8514\n",
      "Epoch 8/10\n",
      "3975/3975 [==============================] - 45s 11ms/step - loss: 1.3486 - accuracy: 0.8534\n",
      "Epoch 9/10\n",
      "3975/3975 [==============================] - 45s 11ms/step - loss: 1.3311 - accuracy: 0.8538\n",
      "Epoch 10/10\n",
      "3975/3975 [==============================] - 46s 12ms/step - loss: 1.3088 - accuracy: 0.8560\n",
      "1026/1026 [==============================] - 5s 5ms/step - loss: 1.6898 - accuracy: 0.6936\n",
      "3975/3975 [==============================] - 20s 5ms/step - loss: 1.2773 - accuracy: 0.8523\n",
      "*** Building Jigsaw with up to 9x9 kernels\n",
      "Epoch 1/10\n",
      "3891/3891 [==============================] - 47s 12ms/step - loss: 1.7513 - accuracy: 0.7261\n",
      "Epoch 2/10\n",
      "3891/3891 [==============================] - 47s 12ms/step - loss: 1.6485 - accuracy: 0.7604\n",
      "Epoch 3/10\n",
      "3891/3891 [==============================] - 46s 12ms/step - loss: 1.5987 - accuracy: 0.7659\n",
      "Epoch 4/10\n",
      "3891/3891 [==============================] - 48s 12ms/step - loss: 1.5624 - accuracy: 0.7691\n",
      "Epoch 5/10\n",
      "3891/3891 [==============================] - 47s 12ms/step - loss: 1.5351 - accuracy: 0.7705\n",
      "Epoch 6/10\n",
      "3891/3891 [==============================] - 48s 12ms/step - loss: 1.5069 - accuracy: 0.7739\n",
      "Epoch 7/10\n",
      "3891/3891 [==============================] - 47s 12ms/step - loss: 1.4834 - accuracy: 0.7767\n",
      "Epoch 8/10\n",
      "3891/3891 [==============================] - 45s 12ms/step - loss: 1.4568 - accuracy: 0.7806\n",
      "Epoch 9/10\n",
      "3891/3891 [==============================] - 47s 12ms/step - loss: 1.4340 - accuracy: 0.7830\n",
      "Epoch 10/10\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3891/3891 [==============================] - 47s 12ms/step - loss: 1.4110 - accuracy: 0.7879\n",
      "1110/1110 [==============================] - 6s 6ms/step - loss: 1.2192 - accuracy: 0.9490\n",
      "3891/3891 [==============================] - 20s 5ms/step - loss: 1.3853 - accuracy: 0.7908\n",
      "*** Building Jigsaw with up to 9x9 kernels\n",
      "Epoch 1/10\n",
      "4122/4122 [==============================] - 48s 12ms/step - loss: 1.7821 - accuracy: 0.7077\n",
      "Epoch 2/10\n",
      "4122/4122 [==============================] - 48s 12ms/step - loss: 1.6647 - accuracy: 0.7608\n",
      "Epoch 3/10\n",
      "4122/4122 [==============================] - 49s 12ms/step - loss: 1.5971 - accuracy: 0.7818\n",
      "Epoch 4/10\n",
      "4122/4122 [==============================] - 49s 12ms/step - loss: 1.5456 - accuracy: 0.7919\n",
      "Epoch 5/10\n",
      "4122/4122 [==============================] - 47s 11ms/step - loss: 1.5095 - accuracy: 0.7977\n",
      "Epoch 6/10\n",
      "4122/4122 [==============================] - 48s 12ms/step - loss: 1.4773 - accuracy: 0.8043\n",
      "Epoch 7/10\n",
      "4122/4122 [==============================] - 47s 11ms/step - loss: 1.4484 - accuracy: 0.8067\n",
      "Epoch 8/10\n",
      "4122/4122 [==============================] - 47s 11ms/step - loss: 1.4255 - accuracy: 0.8132\n",
      "Epoch 9/10\n",
      "4122/4122 [==============================] - 47s 12ms/step - loss: 1.3982 - accuracy: 0.8141\n",
      "Epoch 10/10\n",
      "4122/4122 [==============================] - 46s 11ms/step - loss: 1.3751 - accuracy: 0.8196\n",
      "879/879 [==============================] - 4s 5ms/step - loss: 1.1564 - accuracy: 0.9208\n",
      "4122/4122 [==============================] - 21s 5ms/step - loss: 1.3473 - accuracy: 0.8266\n",
      "*** Building Jigsaw with up to 11x11 kernels\n",
      "Epoch 1/10\n",
      "3936/3936 [==============================] - 50s 13ms/step - loss: 1.7392 - accuracy: 0.8032\n",
      "Epoch 2/10\n",
      "3936/3936 [==============================] - 50s 13ms/step - loss: 1.6375 - accuracy: 0.8206\n",
      "Epoch 3/10\n",
      "3936/3936 [==============================] - 50s 13ms/step - loss: 1.5781 - accuracy: 0.8289\n",
      "Epoch 4/10\n",
      "3936/3936 [==============================] - 50s 13ms/step - loss: 1.5342 - accuracy: 0.8365\n",
      "Epoch 5/10\n",
      "3936/3936 [==============================] - 50s 13ms/step - loss: 1.4962 - accuracy: 0.8410\n",
      "Epoch 6/10\n",
      "3936/3936 [==============================] - 52s 13ms/step - loss: 1.4661 - accuracy: 0.8445\n",
      "Epoch 7/10\n",
      "3936/3936 [==============================] - 53s 13ms/step - loss: 1.4393 - accuracy: 0.8473\n",
      "Epoch 8/10\n",
      "3936/3936 [==============================] - 52s 13ms/step - loss: 1.4110 - accuracy: 0.8520\n",
      "Epoch 9/10\n",
      "3936/3936 [==============================] - 53s 14ms/step - loss: 1.3877 - accuracy: 0.8529\n",
      "Epoch 10/10\n",
      "3936/3936 [==============================] - 54s 14ms/step - loss: 1.3664 - accuracy: 0.8551\n",
      "1065/1065 [==============================] - 6s 6ms/step - loss: 1.6010 - accuracy: 0.7599\n",
      "3936/3936 [==============================] - 22s 6ms/step - loss: 1.3377 - accuracy: 0.8578\n",
      "*** Building Jigsaw with up to 11x11 kernels\n",
      "Epoch 1/10\n",
      "4079/4079 [==============================] - 53s 13ms/step - loss: 1.7347 - accuracy: 0.8207\n",
      "Epoch 2/10\n",
      "4079/4079 [==============================] - 53s 13ms/step - loss: 1.6217 - accuracy: 0.8378\n",
      "Epoch 3/10\n",
      "4079/4079 [==============================] - 54s 13ms/step - loss: 1.5593 - accuracy: 0.8458\n",
      "Epoch 4/10\n",
      "4079/4079 [==============================] - 54s 13ms/step - loss: 1.5147 - accuracy: 0.8512\n",
      "Epoch 5/10\n",
      "4079/4079 [==============================] - 55s 13ms/step - loss: 1.4807 - accuracy: 0.8529\n",
      "Epoch 6/10\n",
      "4079/4079 [==============================] - 55s 13ms/step - loss: 1.4530 - accuracy: 0.8551\n",
      "Epoch 7/10\n",
      "4079/4079 [==============================] - 54s 13ms/step - loss: 1.4251 - accuracy: 0.8552\n",
      "Epoch 8/10\n",
      "4079/4079 [==============================] - 52s 13ms/step - loss: 1.3989 - accuracy: 0.8566\n",
      "Epoch 9/10\n",
      "4079/4079 [==============================] - 55s 14ms/step - loss: 1.3755 - accuracy: 0.8584\n",
      "Epoch 10/10\n",
      "4079/4079 [==============================] - 55s 13ms/step - loss: 1.3518 - accuracy: 0.8601\n",
      "922/922 [==============================] - 6s 6ms/step - loss: 1.6755 - accuracy: 0.6627\n",
      "4079/4079 [==============================] - 22s 5ms/step - loss: 1.3222 - accuracy: 0.8625\n",
      "*** Building Jigsaw with up to 11x11 kernels\n",
      "Epoch 1/10\n",
      "3975/3975 [==============================] - 53s 13ms/step - loss: 1.7437 - accuracy: 0.8212\n",
      "Epoch 2/10\n",
      "3975/3975 [==============================] - 54s 14ms/step - loss: 1.6348 - accuracy: 0.8400\n",
      "Epoch 3/10\n",
      "3975/3975 [==============================] - 51s 13ms/step - loss: 1.5720 - accuracy: 0.8444\n",
      "Epoch 4/10\n",
      "3975/3975 [==============================] - 51s 13ms/step - loss: 1.5307 - accuracy: 0.8458\n",
      "Epoch 5/10\n",
      "3975/3975 [==============================] - 52s 13ms/step - loss: 1.4971 - accuracy: 0.8477\n",
      "Epoch 6/10\n",
      "3975/3975 [==============================] - 51s 13ms/step - loss: 1.4694 - accuracy: 0.8496\n",
      "Epoch 7/10\n",
      "3975/3975 [==============================] - 51s 13ms/step - loss: 1.4428 - accuracy: 0.8520\n",
      "Epoch 8/10\n",
      "3975/3975 [==============================] - 51s 13ms/step - loss: 1.4186 - accuracy: 0.8511\n",
      "Epoch 9/10\n",
      "3975/3975 [==============================] - 52s 13ms/step - loss: 1.3953 - accuracy: 0.8552\n",
      "Epoch 10/10\n",
      "3975/3975 [==============================] - 52s 13ms/step - loss: 1.3728 - accuracy: 0.8565\n",
      "1026/1026 [==============================] - 7s 6ms/step - loss: 1.6727 - accuracy: 0.7154\n",
      "3975/3975 [==============================] - 22s 5ms/step - loss: 1.3427 - accuracy: 0.8645\n",
      "*** Building Jigsaw with up to 11x11 kernels\n",
      "Epoch 1/10\n",
      "3891/3891 [==============================] - 52s 13ms/step - loss: 1.8381 - accuracy: 0.7037\n",
      "Epoch 2/10\n",
      "3891/3891 [==============================] - 51s 13ms/step - loss: 1.7130 - accuracy: 0.7567\n",
      "Epoch 3/10\n",
      "3891/3891 [==============================] - 53s 14ms/step - loss: 1.6644 - accuracy: 0.7623\n",
      "Epoch 4/10\n",
      "3891/3891 [==============================] - 52s 13ms/step - loss: 1.6271 - accuracy: 0.7674\n",
      "Epoch 5/10\n",
      "3891/3891 [==============================] - 52s 13ms/step - loss: 1.5948 - accuracy: 0.7718\n",
      "Epoch 6/10\n",
      "3891/3891 [==============================] - 51s 13ms/step - loss: 1.5647 - accuracy: 0.7761\n",
      "Epoch 7/10\n",
      "3891/3891 [==============================] - 52s 13ms/step - loss: 1.5395 - accuracy: 0.7775\n",
      "Epoch 8/10\n",
      "3891/3891 [==============================] - 52s 13ms/step - loss: 1.5145 - accuracy: 0.7820\n",
      "Epoch 9/10\n",
      "3891/3891 [==============================] - 51s 13ms/step - loss: 1.4896 - accuracy: 0.7861\n",
      "Epoch 10/10\n",
      "3891/3891 [==============================] - 53s 14ms/step - loss: 1.4661 - accuracy: 0.7871\n",
      "1110/1110 [==============================] - 7s 6ms/step - loss: 1.2625 - accuracy: 0.9588\n",
      "3891/3891 [==============================] - 22s 6ms/step - loss: 1.4378 - accuracy: 0.7932\n",
      "*** Building Jigsaw with up to 11x11 kernels\n",
      "Epoch 1/10\n",
      "4122/4122 [==============================] - 54s 13ms/step - loss: 1.8316 - accuracy: 0.7205\n",
      "Epoch 2/10\n",
      "4122/4122 [==============================] - 54s 13ms/step - loss: 1.7294 - accuracy: 0.7682\n",
      "Epoch 3/10\n",
      "4122/4122 [==============================] - 53s 13ms/step - loss: 1.6708 - accuracy: 0.7835\n",
      "Epoch 4/10\n",
      "4122/4122 [==============================] - 53s 13ms/step - loss: 1.6246 - accuracy: 0.7907\n",
      "Epoch 5/10\n",
      "4122/4122 [==============================] - 54s 13ms/step - loss: 1.5857 - accuracy: 0.7983\n",
      "Epoch 6/10\n",
      "4122/4122 [==============================] - 50s 12ms/step - loss: 1.5523 - accuracy: 0.8025\n",
      "Epoch 7/10\n",
      "4122/4122 [==============================] - 53s 13ms/step - loss: 1.5232 - accuracy: 0.8073\n",
      "Epoch 8/10\n",
      "4122/4122 [==============================] - 54s 13ms/step - loss: 1.4944 - accuracy: 0.8081\n",
      "Epoch 9/10\n",
      "4122/4122 [==============================] - 55s 13ms/step - loss: 1.4686 - accuracy: 0.8138\n",
      "Epoch 10/10\n",
      "4122/4122 [==============================] - 55s 13ms/step - loss: 1.4433 - accuracy: 0.8177\n",
      "879/879 [==============================] - 6s 7ms/step - loss: 1.2254 - accuracy: 0.9224\n",
      "4122/4122 [==============================] - 23s 6ms/step - loss: 1.4098 - accuracy: 0.8290\n",
      "*** Building Jigsaw with up to 11x11 kernels\n",
      "Epoch 1/10\n",
      "3936/3936 [==============================] - 52s 13ms/step - loss: 1.7508 - accuracy: 0.7966\n",
      "Epoch 2/10\n",
      "3936/3936 [==============================] - 52s 13ms/step - loss: 1.6404 - accuracy: 0.8204\n",
      "Epoch 3/10\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3936/3936 [==============================] - 51s 13ms/step - loss: 1.5778 - accuracy: 0.8298\n",
      "Epoch 4/10\n",
      "3936/3936 [==============================] - 52s 13ms/step - loss: 1.5352 - accuracy: 0.8355\n",
      "Epoch 5/10\n",
      "3936/3936 [==============================] - 52s 13ms/step - loss: 1.4971 - accuracy: 0.8406\n",
      "Epoch 6/10\n",
      "3936/3936 [==============================] - 53s 13ms/step - loss: 1.4673 - accuracy: 0.8439\n",
      "Epoch 7/10\n",
      "3936/3936 [==============================] - 52s 13ms/step - loss: 1.4387 - accuracy: 0.8476\n",
      "Epoch 8/10\n",
      "3936/3936 [==============================] - 49s 13ms/step - loss: 1.4132 - accuracy: 0.8491\n",
      "Epoch 9/10\n",
      "3936/3936 [==============================] - 51s 13ms/step - loss: 1.3877 - accuracy: 0.8511\n",
      "Epoch 10/10\n",
      "3936/3936 [==============================] - 47s 12ms/step - loss: 1.3651 - accuracy: 0.8548\n",
      "1065/1065 [==============================] - 6s 6ms/step - loss: 1.6073 - accuracy: 0.7244\n",
      "3936/3936 [==============================] - 21s 5ms/step - loss: 1.3352 - accuracy: 0.8619\n",
      "*** Building Jigsaw with up to 11x11 kernels\n",
      "Epoch 1/10\n",
      "4079/4079 [==============================] - 51s 12ms/step - loss: 1.7353 - accuracy: 0.8111\n",
      "Epoch 2/10\n",
      "4079/4079 [==============================] - 52s 13ms/step - loss: 1.6283 - accuracy: 0.8366\n",
      "Epoch 3/10\n",
      "4079/4079 [==============================] - 52s 13ms/step - loss: 1.5649 - accuracy: 0.8432\n",
      "Epoch 4/10\n",
      "4079/4079 [==============================] - 53s 13ms/step - loss: 1.5194 - accuracy: 0.8476\n",
      "Epoch 5/10\n",
      "4079/4079 [==============================] - 50s 12ms/step - loss: 1.4848 - accuracy: 0.8497\n",
      "Epoch 6/10\n",
      "4079/4079 [==============================] - 51s 12ms/step - loss: 1.4543 - accuracy: 0.8531\n",
      "Epoch 7/10\n",
      "4079/4079 [==============================] - 50s 12ms/step - loss: 1.4234 - accuracy: 0.8528\n",
      "Epoch 8/10\n",
      "4079/4079 [==============================] - 51s 13ms/step - loss: 1.3992 - accuracy: 0.8542\n",
      "Epoch 9/10\n",
      "4079/4079 [==============================] - 49s 12ms/step - loss: 1.3731 - accuracy: 0.8563\n",
      "Epoch 10/10\n",
      "4079/4079 [==============================] - 51s 12ms/step - loss: 1.3509 - accuracy: 0.8570\n",
      "922/922 [==============================] - 5s 6ms/step - loss: 1.6470 - accuracy: 0.6600\n",
      "4079/4079 [==============================] - 22s 5ms/step - loss: 1.3180 - accuracy: 0.8614\n",
      "*** Building Jigsaw with up to 11x11 kernels\n",
      "Epoch 1/10\n",
      "3975/3975 [==============================] - 54s 14ms/step - loss: 1.7334 - accuracy: 0.8257\n",
      "Epoch 2/10\n",
      "3975/3975 [==============================] - 55s 14ms/step - loss: 1.6273 - accuracy: 0.8384\n",
      "Epoch 3/10\n",
      "3975/3975 [==============================] - 54s 14ms/step - loss: 1.5666 - accuracy: 0.8410\n",
      "Epoch 4/10\n",
      "3975/3975 [==============================] - 52s 13ms/step - loss: 1.5254 - accuracy: 0.8438\n",
      "Epoch 5/10\n",
      "3975/3975 [==============================] - 54s 14ms/step - loss: 1.4898 - accuracy: 0.8476\n",
      "Epoch 6/10\n",
      "3975/3975 [==============================] - 53s 13ms/step - loss: 1.4567 - accuracy: 0.8515\n",
      "Epoch 7/10\n",
      "3975/3975 [==============================] - 53s 13ms/step - loss: 1.4328 - accuracy: 0.8523\n",
      "Epoch 8/10\n",
      "3975/3975 [==============================] - 55s 14ms/step - loss: 1.4043 - accuracy: 0.8535\n",
      "Epoch 9/10\n",
      "3975/3975 [==============================] - 54s 14ms/step - loss: 1.3817 - accuracy: 0.8545\n",
      "Epoch 10/10\n",
      "3975/3975 [==============================] - 54s 14ms/step - loss: 1.3602 - accuracy: 0.8564\n",
      "1026/1026 [==============================] - 5s 5ms/step - loss: 1.7217 - accuracy: 0.7083\n",
      "3975/3975 [==============================] - 20s 5ms/step - loss: 1.3287 - accuracy: 0.8551\n",
      "*** Building Jigsaw with up to 11x11 kernels\n",
      "Epoch 1/10\n",
      "3891/3891 [==============================] - 51s 13ms/step - loss: 1.8100 - accuracy: 0.7266\n",
      "Epoch 2/10\n",
      "3891/3891 [==============================] - 51s 13ms/step - loss: 1.7054 - accuracy: 0.7600\n",
      "Epoch 3/10\n",
      "3891/3891 [==============================] - 51s 13ms/step - loss: 1.6555 - accuracy: 0.7655\n",
      "Epoch 4/10\n",
      "3891/3891 [==============================] - 51s 13ms/step - loss: 1.6178 - accuracy: 0.7714\n",
      "Epoch 5/10\n",
      "3891/3891 [==============================] - 51s 13ms/step - loss: 1.5864 - accuracy: 0.7754\n",
      "Epoch 6/10\n",
      "3891/3891 [==============================] - 51s 13ms/step - loss: 1.5564 - accuracy: 0.7810\n",
      "Epoch 7/10\n",
      "3891/3891 [==============================] - 53s 14ms/step - loss: 1.5306 - accuracy: 0.7830\n",
      "Epoch 8/10\n",
      "3891/3891 [==============================] - 52s 13ms/step - loss: 1.5026 - accuracy: 0.7855\n",
      "Epoch 9/10\n",
      "3891/3891 [==============================] - 52s 13ms/step - loss: 1.4775 - accuracy: 0.7910\n",
      "Epoch 10/10\n",
      "3891/3891 [==============================] - 52s 13ms/step - loss: 1.4535 - accuracy: 0.7936\n",
      "1110/1110 [==============================] - 7s 6ms/step - loss: 1.2480 - accuracy: 0.9609\n",
      "3891/3891 [==============================] - 22s 6ms/step - loss: 1.4247 - accuracy: 0.8002\n",
      "*** Building Jigsaw with up to 11x11 kernels\n",
      "Epoch 1/10\n",
      "4122/4122 [==============================] - 52s 13ms/step - loss: 1.8191 - accuracy: 0.7451\n",
      "Epoch 2/10\n",
      "4122/4122 [==============================] - 53s 13ms/step - loss: 1.7321 - accuracy: 0.7721\n",
      "Epoch 3/10\n",
      "4122/4122 [==============================] - 55s 13ms/step - loss: 1.6713 - accuracy: 0.7835\n",
      "Epoch 4/10\n",
      "4122/4122 [==============================] - 54s 13ms/step - loss: 1.6220 - accuracy: 0.7900\n",
      "Epoch 5/10\n",
      "4122/4122 [==============================] - 52s 13ms/step - loss: 1.5867 - accuracy: 0.7942\n",
      "Epoch 6/10\n",
      "4122/4122 [==============================] - 51s 12ms/step - loss: 1.5535 - accuracy: 0.7998\n",
      "Epoch 7/10\n",
      "4122/4122 [==============================] - 53s 13ms/step - loss: 1.5226 - accuracy: 0.8015\n",
      "Epoch 8/10\n",
      "4122/4122 [==============================] - 52s 13ms/step - loss: 1.4967 - accuracy: 0.8043\n",
      "Epoch 9/10\n",
      "4122/4122 [==============================] - 52s 13ms/step - loss: 1.4701 - accuracy: 0.8074\n",
      "Epoch 10/10\n",
      "4122/4122 [==============================] - 52s 13ms/step - loss: 1.4459 - accuracy: 0.8106\n",
      "879/879 [==============================] - 5s 5ms/step - loss: 1.2152 - accuracy: 0.9249\n",
      "4122/4122 [==============================] - 22s 5ms/step - loss: 1.4152 - accuracy: 0.8197\n",
      "*** Building Jigsaw with up to 13x13 kernels\n",
      "Epoch 1/10\n",
      "3936/3936 [==============================] - 56s 14ms/step - loss: 1.8193 - accuracy: 0.7923\n",
      "Epoch 2/10\n",
      "3936/3936 [==============================] - 55s 14ms/step - loss: 1.7131 - accuracy: 0.8178\n",
      "Epoch 3/10\n",
      "3936/3936 [==============================] - 53s 13ms/step - loss: 1.6501 - accuracy: 0.8281\n",
      "Epoch 4/10\n",
      "3936/3936 [==============================] - 55s 14ms/step - loss: 1.6061 - accuracy: 0.8340\n",
      "Epoch 5/10\n",
      "3936/3936 [==============================] - 56s 14ms/step - loss: 1.5666 - accuracy: 0.8392\n",
      "Epoch 6/10\n",
      "3936/3936 [==============================] - 56s 14ms/step - loss: 1.5315 - accuracy: 0.8439\n",
      "Epoch 7/10\n",
      "3936/3936 [==============================] - 56s 14ms/step - loss: 1.5027 - accuracy: 0.8473\n",
      "Epoch 8/10\n",
      "3936/3936 [==============================] - 56s 14ms/step - loss: 1.4738 - accuracy: 0.8498\n",
      "Epoch 9/10\n",
      "3936/3936 [==============================] - 54s 14ms/step - loss: 1.4488 - accuracy: 0.8511\n",
      "Epoch 10/10\n",
      "3936/3936 [==============================] - 56s 14ms/step - loss: 1.4253 - accuracy: 0.8542\n",
      "1065/1065 [==============================] - 6s 6ms/step - loss: 1.6550 - accuracy: 0.7598\n",
      "3936/3936 [==============================] - 23s 6ms/step - loss: 1.3938 - accuracy: 0.8622\n",
      "*** Building Jigsaw with up to 13x13 kernels\n",
      "Epoch 1/10\n",
      "4079/4079 [==============================] - 57s 14ms/step - loss: 1.7875 - accuracy: 0.8279\n",
      "Epoch 2/10\n",
      "4079/4079 [==============================] - 57s 14ms/step - loss: 1.6828 - accuracy: 0.8421\n",
      "Epoch 3/10\n",
      "4079/4079 [==============================] - 57s 14ms/step - loss: 1.6254 - accuracy: 0.8487\n",
      "Epoch 4/10\n",
      "4079/4079 [==============================] - 56s 14ms/step - loss: 1.5805 - accuracy: 0.8536\n",
      "Epoch 5/10\n",
      "4079/4079 [==============================] - 57s 14ms/step - loss: 1.5441 - accuracy: 0.8546\n",
      "Epoch 6/10\n",
      "4079/4079 [==============================] - 57s 14ms/step - loss: 1.5131 - accuracy: 0.8562\n",
      "Epoch 7/10\n",
      "4079/4079 [==============================] - 56s 14ms/step - loss: 1.4840 - accuracy: 0.8562\n",
      "Epoch 8/10\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4079/4079 [==============================] - 56s 14ms/step - loss: 1.4548 - accuracy: 0.8571\n",
      "Epoch 9/10\n",
      "4079/4079 [==============================] - 58s 14ms/step - loss: 1.4290 - accuracy: 0.8594\n",
      "Epoch 10/10\n",
      "4079/4079 [==============================] - 57s 14ms/step - loss: 1.4023 - accuracy: 0.8602\n",
      "922/922 [==============================] - 6s 6ms/step - loss: 1.7219 - accuracy: 0.6691\n",
      "4079/4079 [==============================] - 24s 6ms/step - loss: 1.3749 - accuracy: 0.8621\n",
      "*** Building Jigsaw with up to 13x13 kernels\n",
      "Epoch 1/10\n",
      "3975/3975 [==============================] - 56s 14ms/step - loss: 1.8258 - accuracy: 0.8212\n",
      "Epoch 2/10\n",
      "3975/3975 [==============================] - 56s 14ms/step - loss: 1.7111 - accuracy: 0.8353\n",
      "Epoch 3/10\n",
      "3975/3975 [==============================] - 55s 14ms/step - loss: 1.6464 - accuracy: 0.8393\n",
      "Epoch 4/10\n",
      "3975/3975 [==============================] - 54s 13ms/step - loss: 1.6015 - accuracy: 0.8447\n",
      "Epoch 5/10\n",
      "3975/3975 [==============================] - 56s 14ms/step - loss: 1.5635 - accuracy: 0.8473\n",
      "Epoch 6/10\n",
      "3975/3975 [==============================] - 55s 14ms/step - loss: 1.5291 - accuracy: 0.8499\n",
      "Epoch 7/10\n",
      "3975/3975 [==============================] - 55s 14ms/step - loss: 1.4996 - accuracy: 0.8509\n",
      "Epoch 8/10\n",
      "3975/3975 [==============================] - 55s 14ms/step - loss: 1.4760 - accuracy: 0.8525\n",
      "Epoch 9/10\n",
      "3975/3975 [==============================] - 55s 14ms/step - loss: 1.4477 - accuracy: 0.8554\n",
      "Epoch 10/10\n",
      "3975/3975 [==============================] - 55s 14ms/step - loss: 1.4240 - accuracy: 0.8559\n",
      "1026/1026 [==============================] - 6s 6ms/step - loss: 1.7600 - accuracy: 0.7129\n",
      "3975/3975 [==============================] - 24s 6ms/step - loss: 1.3870 - accuracy: 0.8684\n",
      "*** Building Jigsaw with up to 13x13 kernels\n",
      "Epoch 1/10\n",
      "3891/3891 [==============================] - 55s 14ms/step - loss: 1.8680 - accuracy: 0.7383\n",
      "Epoch 2/10\n",
      "3891/3891 [==============================] - 55s 14ms/step - loss: 1.7807 - accuracy: 0.7585\n",
      "Epoch 3/10\n",
      "3891/3891 [==============================] - 55s 14ms/step - loss: 1.7319 - accuracy: 0.7652\n",
      "Epoch 4/10\n",
      "3891/3891 [==============================] - 57s 15ms/step - loss: 1.6936 - accuracy: 0.7668\n",
      "Epoch 5/10\n",
      "3891/3891 [==============================] - 53s 14ms/step - loss: 1.6591 - accuracy: 0.7724\n",
      "Epoch 6/10\n",
      "3891/3891 [==============================] - 56s 14ms/step - loss: 1.6278 - accuracy: 0.7754\n",
      "Epoch 7/10\n",
      "3891/3891 [==============================] - 58s 15ms/step - loss: 1.5983 - accuracy: 0.7815\n",
      "Epoch 8/10\n",
      "3891/3891 [==============================] - 57s 15ms/step - loss: 1.5711 - accuracy: 0.7841\n",
      "Epoch 9/10\n",
      "3891/3891 [==============================] - 55s 14ms/step - loss: 1.5429 - accuracy: 0.7884\n",
      "Epoch 10/10\n",
      "3891/3891 [==============================] - 56s 15ms/step - loss: 1.5164 - accuracy: 0.7910\n",
      "1110/1110 [==============================] - 6s 6ms/step - loss: 1.3189 - accuracy: 0.9541\n",
      "3891/3891 [==============================] - 23s 6ms/step - loss: 1.4871 - accuracy: 0.7961\n",
      "*** Building Jigsaw with up to 13x13 kernels\n",
      "Epoch 1/10\n",
      "4122/4122 [==============================] - 59s 14ms/step - loss: 1.8810 - accuracy: 0.7359\n",
      "Epoch 2/10\n",
      "4122/4122 [==============================] - 60s 14ms/step - loss: 1.7817 - accuracy: 0.7714\n",
      "Epoch 3/10\n",
      "4122/4122 [==============================] - 60s 15ms/step - loss: 1.7200 - accuracy: 0.7854\n",
      "Epoch 4/10\n",
      "4122/4122 [==============================] - 59s 14ms/step - loss: 1.6735 - accuracy: 0.7911\n",
      "Epoch 5/10\n",
      "4122/4122 [==============================] - 56s 14ms/step - loss: 1.6351 - accuracy: 0.7991\n",
      "Epoch 6/10\n",
      "4122/4122 [==============================] - 58s 14ms/step - loss: 1.6018 - accuracy: 0.8011\n",
      "Epoch 7/10\n",
      "4122/4122 [==============================] - 60s 14ms/step - loss: 1.5712 - accuracy: 0.8054\n",
      "Epoch 8/10\n",
      "4122/4122 [==============================] - 60s 15ms/step - loss: 1.5439 - accuracy: 0.8088\n",
      "Epoch 9/10\n",
      "4122/4122 [==============================] - 58s 14ms/step - loss: 1.5162 - accuracy: 0.8113\n",
      "Epoch 10/10\n",
      "4122/4122 [==============================] - 60s 15ms/step - loss: 1.4912 - accuracy: 0.8151\n",
      "879/879 [==============================] - 6s 6ms/step - loss: 1.2743 - accuracy: 0.9213\n",
      "4122/4122 [==============================] - 26s 6ms/step - loss: 1.4581 - accuracy: 0.8251\n",
      "*** Building Jigsaw with up to 13x13 kernels\n",
      "Epoch 1/10\n",
      "3936/3936 [==============================] - 57s 15ms/step - loss: 1.8036 - accuracy: 0.7939\n",
      "Epoch 2/10\n",
      "3936/3936 [==============================] - 58s 15ms/step - loss: 1.7028 - accuracy: 0.8156\n",
      "Epoch 3/10\n",
      "3936/3936 [==============================] - 57s 14ms/step - loss: 1.6401 - accuracy: 0.8234\n",
      "Epoch 4/10\n",
      "3936/3936 [==============================] - 58s 15ms/step - loss: 1.5971 - accuracy: 0.8293\n",
      "Epoch 5/10\n",
      "3936/3936 [==============================] - 55s 14ms/step - loss: 1.5583 - accuracy: 0.8362\n",
      "Epoch 6/10\n",
      "3936/3936 [==============================] - 57s 15ms/step - loss: 1.5263 - accuracy: 0.8384\n",
      "Epoch 7/10\n",
      "3936/3936 [==============================] - 57s 15ms/step - loss: 1.4951 - accuracy: 0.8431\n",
      "Epoch 8/10\n",
      "3936/3936 [==============================] - 56s 14ms/step - loss: 1.4683 - accuracy: 0.8454\n",
      "Epoch 9/10\n",
      "3936/3936 [==============================] - 57s 15ms/step - loss: 1.4409 - accuracy: 0.8491\n",
      "Epoch 10/10\n",
      "3936/3936 [==============================] - 56s 14ms/step - loss: 1.4145 - accuracy: 0.8517\n",
      "1065/1065 [==============================] - 7s 6ms/step - loss: 1.6367 - accuracy: 0.7400\n",
      "3936/3936 [==============================] - 24s 6ms/step - loss: 1.3811 - accuracy: 0.8610\n",
      "*** Building Jigsaw with up to 13x13 kernels\n",
      "Epoch 1/10\n",
      "4079/4079 [==============================] - 60s 15ms/step - loss: 1.8444 - accuracy: 0.7811\n",
      "Epoch 2/10\n",
      "4079/4079 [==============================] - 60s 15ms/step - loss: 1.7183 - accuracy: 0.8263\n",
      "Epoch 3/10\n",
      "4079/4079 [==============================] - 60s 15ms/step - loss: 1.6473 - accuracy: 0.8409\n",
      "Epoch 4/10\n",
      "4079/4079 [==============================] - 62s 15ms/step - loss: 1.5991 - accuracy: 0.8484\n",
      "Epoch 5/10\n",
      "4079/4079 [==============================] - 60s 15ms/step - loss: 1.5590 - accuracy: 0.8522\n",
      "Epoch 6/10\n",
      "4079/4079 [==============================] - 61s 15ms/step - loss: 1.5249 - accuracy: 0.8561\n",
      "Epoch 7/10\n",
      "4079/4079 [==============================] - 61s 15ms/step - loss: 1.4942 - accuracy: 0.8587\n",
      "Epoch 8/10\n",
      "4079/4079 [==============================] - 59s 15ms/step - loss: 1.4641 - accuracy: 0.8593\n",
      "Epoch 9/10\n",
      "4079/4079 [==============================] - 61s 15ms/step - loss: 1.4412 - accuracy: 0.8601\n",
      "Epoch 10/10\n",
      "4079/4079 [==============================] - 61s 15ms/step - loss: 1.4159 - accuracy: 0.8606\n",
      "922/922 [==============================] - 5s 6ms/step - loss: 1.7288 - accuracy: 0.6799\n",
      "4079/4079 [==============================] - 24s 6ms/step - loss: 1.3825 - accuracy: 0.8645\n",
      "*** Building Jigsaw with up to 13x13 kernels\n",
      "Epoch 1/10\n",
      "3975/3975 [==============================] - 58s 15ms/step - loss: 1.8122 - accuracy: 0.8099\n",
      "Epoch 2/10\n",
      "3975/3975 [==============================] - 58s 15ms/step - loss: 1.7015 - accuracy: 0.8349\n",
      "Epoch 3/10\n",
      "3975/3975 [==============================] - 56s 14ms/step - loss: 1.6407 - accuracy: 0.8400\n",
      "Epoch 4/10\n",
      "3975/3975 [==============================] - 56s 14ms/step - loss: 1.5982 - accuracy: 0.8447\n",
      "Epoch 5/10\n",
      "3975/3975 [==============================] - 58s 15ms/step - loss: 1.5609 - accuracy: 0.8453\n",
      "Epoch 6/10\n",
      "3975/3975 [==============================] - 57s 14ms/step - loss: 1.5284 - accuracy: 0.8480\n",
      "Epoch 7/10\n",
      "3975/3975 [==============================] - 58s 15ms/step - loss: 1.4991 - accuracy: 0.8499\n",
      "Epoch 8/10\n",
      "3975/3975 [==============================] - 57s 14ms/step - loss: 1.4712 - accuracy: 0.8514\n",
      "Epoch 9/10\n",
      "3975/3975 [==============================] - 58s 15ms/step - loss: 1.4455 - accuracy: 0.8526\n",
      "Epoch 10/10\n",
      "3975/3975 [==============================] - 55s 14ms/step - loss: 1.4192 - accuracy: 0.8543\n",
      "1026/1026 [==============================] - 7s 6ms/step - loss: 1.7274 - accuracy: 0.7069\n",
      "3975/3975 [==============================] - 24s 6ms/step - loss: 1.3826 - accuracy: 0.8547\n",
      "*** Building Jigsaw with up to 13x13 kernels\n",
      "Epoch 1/10\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3891/3891 [==============================] - 57s 15ms/step - loss: 1.8883 - accuracy: 0.7221\n",
      "Epoch 2/10\n",
      "3891/3891 [==============================] - 57s 15ms/step - loss: 1.7778 - accuracy: 0.7571\n",
      "Epoch 3/10\n",
      "3891/3891 [==============================] - 57s 15ms/step - loss: 1.7227 - accuracy: 0.7626\n",
      "Epoch 4/10\n",
      "3891/3891 [==============================] - 57s 15ms/step - loss: 1.6819 - accuracy: 0.7687\n",
      "Epoch 5/10\n",
      "3891/3891 [==============================] - 58s 15ms/step - loss: 1.6475 - accuracy: 0.7711\n",
      "Epoch 6/10\n",
      "3891/3891 [==============================] - 57s 15ms/step - loss: 1.6155 - accuracy: 0.7754\n",
      "Epoch 7/10\n",
      "3891/3891 [==============================] - 57s 15ms/step - loss: 1.5872 - accuracy: 0.7806\n",
      "Epoch 8/10\n",
      "3891/3891 [==============================] - 58s 15ms/step - loss: 1.5588 - accuracy: 0.7844\n",
      "Epoch 9/10\n",
      "3891/3891 [==============================] - 57s 15ms/step - loss: 1.5333 - accuracy: 0.7862\n",
      "Epoch 10/10\n",
      "3891/3891 [==============================] - 55s 14ms/step - loss: 1.5096 - accuracy: 0.7891\n",
      "1110/1110 [==============================] - 7s 6ms/step - loss: 1.3013 - accuracy: 0.9643\n",
      "3891/3891 [==============================] - 24s 6ms/step - loss: 1.4824 - accuracy: 0.7965\n",
      "*** Building Jigsaw with up to 13x13 kernels\n",
      "Epoch 1/10\n",
      "4122/4122 [==============================] - 60s 15ms/step - loss: 1.8792 - accuracy: 0.7358\n",
      "Epoch 2/10\n",
      "4122/4122 [==============================] - 59s 14ms/step - loss: 1.7904 - accuracy: 0.7727\n",
      "Epoch 3/10\n",
      "4122/4122 [==============================] - 57s 14ms/step - loss: 1.7321 - accuracy: 0.7844\n",
      "Epoch 4/10\n",
      "4122/4122 [==============================] - 59s 14ms/step - loss: 1.6817 - accuracy: 0.7905\n",
      "Epoch 5/10\n",
      "4122/4122 [==============================] - 59s 14ms/step - loss: 1.6421 - accuracy: 0.7950\n",
      "Epoch 6/10\n",
      "4122/4122 [==============================] - 59s 14ms/step - loss: 1.6074 - accuracy: 0.7989\n",
      "Epoch 7/10\n",
      "4122/4122 [==============================] - 59s 14ms/step - loss: 1.5770 - accuracy: 0.8031\n",
      "Epoch 8/10\n",
      "4122/4122 [==============================] - 57s 14ms/step - loss: 1.5502 - accuracy: 0.8063\n",
      "Epoch 9/10\n",
      "4122/4122 [==============================] - 59s 14ms/step - loss: 1.5209 - accuracy: 0.8091\n",
      "Epoch 10/10\n",
      "4122/4122 [==============================] - 58s 14ms/step - loss: 1.4950 - accuracy: 0.8116\n",
      "879/879 [==============================] - 5s 5ms/step - loss: 1.2494 - accuracy: 0.9409\n",
      "4122/4122 [==============================] - 25s 6ms/step - loss: 1.4616 - accuracy: 0.8185\n",
      "*** Building Jigsaw with up to 7x7 kernels\n",
      "Epoch 1/10\n",
      "5000/5000 [==============================] - 48s 10ms/step - loss: 1.6252 - accuracy: 0.7890\n",
      "Epoch 2/10\n",
      "5000/5000 [==============================] - 45s 9ms/step - loss: 1.5291 - accuracy: 0.8028\n",
      "Epoch 3/10\n",
      "5000/5000 [==============================] - 44s 9ms/step - loss: 1.4682 - accuracy: 0.8123\n",
      "Epoch 4/10\n",
      "5000/5000 [==============================] - 46s 9ms/step - loss: 1.4237 - accuracy: 0.8163\n",
      "Epoch 5/10\n",
      "5000/5000 [==============================] - 44s 9ms/step - loss: 1.3851 - accuracy: 0.8195\n",
      "Epoch 6/10\n",
      "5000/5000 [==============================] - 43s 9ms/step - loss: 1.3525 - accuracy: 0.8246\n",
      "Epoch 7/10\n",
      "5000/5000 [==============================] - 44s 9ms/step - loss: 1.3233 - accuracy: 0.8262\n",
      "Epoch 8/10\n",
      "5000/5000 [==============================] - 44s 9ms/step - loss: 1.2971 - accuracy: 0.8299\n",
      "Epoch 9/10\n",
      "5000/5000 [==============================] - 44s 9ms/step - loss: 1.2722 - accuracy: 0.8315\n",
      "Epoch 10/10\n",
      "5000/5000 [==============================] - 44s 9ms/step - loss: 1.2485 - accuracy: 0.8325\n"
     ]
    }
   ],
   "source": [
    "cv = rSpCV.RepeatedCV()\n",
    "X = rSpCV.X()\n",
    "y = rSpCV.y()\n",
    "#tr, ts = next(cv)\n",
    "#X2=X[tr]\n",
    "#y=y[tr]\n",
    "X2=X[np.arange(len(X))]\n",
    "y_binary = to_categorical(y)\n",
    "\n",
    "m = KerasClassifier(build_jigsaw, batch_size = 10, epochs = 10)\n",
    "\n",
    "parameters = {'internal_size':[3, 5, 7, 9, 11, 13]}\n",
    "\n",
    "clf = GridSearchCV(m, parameters, \n",
    "                   cv=cv,\n",
    "                   return_train_score=True\n",
    "                  )\n",
    "\n",
    "clf.fit(X2, y_binary)\n",
    "results = clf.cv_results_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b0803114",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6d2952bc",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b2bb5218",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Show all available metrics for GridSearchCV\n",
    "sorted(clf.cv_results_.keys())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "678d497e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "3a771c39",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x936 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "scoring = {\"score\": \"accuracy\"}\n",
    "\n",
    "plt.figure(figsize=(13, 13))\n",
    "plt.title(\"GridSearchCV evaluating using multiple scorers simultaneously\", fontsize=16)\n",
    "\n",
    "plt.xlabel(\"param_internal_size\")\n",
    "plt.ylabel(\"Score\")\n",
    "\n",
    "ax = plt.gca()\n",
    "#ax.set_xlim(0, 402)\n",
    "#ax.set_ylim(0.60, 1)\n",
    "\n",
    "# Get the regular numpy array from the MaskedArray\n",
    "X_axis = np.array(results[\"param_internal_size\"].data, dtype=float)\n",
    "\n",
    "#for scorer, color in zip(sorted(scoring), [\"g\", \"k\"]):\n",
    "for scorer, color in zip([\"score\"], [\"g\"]):\n",
    "    for sample, style in ((\"train\", \"--\"), (\"test\", \"-\")):\n",
    "        #scorer = \"score\"\n",
    "        #color = \"g\"\n",
    "        #sample = \"test\"\n",
    "        #style = \"-\"\n",
    "        sample_score_mean = results[\"mean_%s_%s\" % (sample, scorer)]\n",
    "        sample_score_std = results[\"std_%s_%s\" % (sample, scorer)]\n",
    "        ax.fill_between(\n",
    "            X_axis,\n",
    "            sample_score_mean - sample_score_std,\n",
    "            sample_score_mean + sample_score_std,\n",
    "            alpha=0.1 if sample == \"test\" else 0,\n",
    "            color=color,\n",
    "        )\n",
    "        ax.plot(\n",
    "            X_axis,\n",
    "            sample_score_mean,\n",
    "            style,\n",
    "            color=color,\n",
    "            alpha=1 if sample == \"test\" else 0.7,\n",
    "            label=\"%s (%s)\" % (scorer, sample),\n",
    "        )\n",
    "    best_index = np.nonzero(results[\"rank_test_%s\" % scorer] == 1)[0][0]\n",
    "    best_score = results[\"mean_test_%s\" % scorer][best_index]\n",
    "    # Plot a dotted vertical line at the best score for that scorer marked by x\n",
    "    ax.plot(\n",
    "        [\n",
    "            X_axis[best_index],\n",
    "        ]\n",
    "        * 2,\n",
    "        [0, best_score],\n",
    "        linestyle=\"-.\",\n",
    "        color=color,\n",
    "        marker=\"x\",\n",
    "        markeredgewidth=3,\n",
    "        ms=8,\n",
    "    )\n",
    "\n",
    "    # Annotate the best score for that scorer\n",
    "    ax.annotate(\"%0.2f\" % best_score, (X_axis[best_index], best_score + 0.005))\n",
    "\n",
    "plt.legend(loc=\"best\")\n",
    "plt.grid(False)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "070834ba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'mean_fit_time': array([249.87746546, 316.64506078, 407.90692806, 463.57474768,\n",
       "        524.53797669, 573.91162128]),\n",
       " 'std_fit_time': array([ 5.33187764,  8.91929358, 10.710281  , 13.00723327, 10.31825273,\n",
       "        16.522486  ]),\n",
       " 'mean_score_time': array([3.27026525, 3.76689994, 4.73975282, 5.40280876, 6.29650459,\n",
       "        6.21310711]),\n",
       " 'std_score_time': array([0.2597956 , 0.55226342, 0.52945718, 0.69218202, 0.71210138,\n",
       "        0.61519397]),\n",
       " 'param_internal_size': masked_array(data=[3, 5, 7, 9, 11, 13],\n",
       "              mask=[False, False, False, False, False, False],\n",
       "        fill_value='?',\n",
       "             dtype=object),\n",
       " 'params': [{'internal_size': 3},\n",
       "  {'internal_size': 5},\n",
       "  {'internal_size': 7},\n",
       "  {'internal_size': 9},\n",
       "  {'internal_size': 11},\n",
       "  {'internal_size': 13}],\n",
       " 'split0_test_score': array([0.76204789, 0.75706905, 0.75998122, 0.76110852, 0.75988728,\n",
       "        0.75979334]),\n",
       " 'split1_test_score': array([0.64999455, 0.66464144, 0.66442442, 0.63936204, 0.66268849,\n",
       "        0.66908973]),\n",
       " 'split2_test_score': array([0.71239156, 0.70927173, 0.70780933, 0.70741934, 0.71541387,\n",
       "        0.712879  ]),\n",
       " 'split3_test_score': array([0.97476798, 0.97639   , 0.97494817, 0.95287013, 0.95881772,\n",
       "        0.95413172]),\n",
       " 'split4_test_score': array([0.92144811, 0.92235881, 0.93943536, 0.91996813, 0.92235881,\n",
       "        0.92133427]),\n",
       " 'split5_test_score': array([0.75509632, 0.75688118, 0.75565994, 0.7536872 , 0.72437763,\n",
       "        0.73997182]),\n",
       " 'split6_test_score': array([0.65737224, 0.64880115, 0.66008461, 0.66789627, 0.65997612,\n",
       "        0.67993927]),\n",
       " 'split7_test_score': array([0.6840207 , 0.69961977, 0.70449448, 0.69357514, 0.70829678,\n",
       "        0.70693183]),\n",
       " 'split8_test_score': array([0.9714337 , 0.95611429, 0.96512568, 0.94899523, 0.96089035,\n",
       "        0.9643147 ]),\n",
       " 'split9_test_score': array([0.91905737, 0.94467211, 0.92930329, 0.92076504, 0.9248634 ,\n",
       "        0.94091529]),\n",
       " 'mean_test_score': array([0.80076304, 0.80358195, 0.80612665, 0.7965647 , 0.79975705,\n",
       "        0.8049301 ]),\n",
       " 'std_test_score': array([0.12501172, 0.12427857, 0.12361415, 0.11884368, 0.11959261,\n",
       "        0.11752266]),\n",
       " 'rank_test_score': array([4, 3, 1, 6, 5, 2], dtype=int32),\n",
       " 'split0_train_score': array([0.8488121 , 0.8587473 , 0.85491043, 0.856435  , 0.85780716,\n",
       "        0.862203  ]),\n",
       " 'split1_train_score': array([0.85633719, 0.85918152, 0.85876471, 0.85918152, 0.86246723,\n",
       "        0.86205035]),\n",
       " 'split2_train_score': array([0.86161083, 0.86153537, 0.86596382, 0.86664319, 0.86445409,\n",
       "        0.86840451]),\n",
       " 'split3_train_score': array([0.79091585, 0.79564559, 0.79942423, 0.80150628, 0.79320359,\n",
       "        0.79610825]),\n",
       " 'split4_train_score': array([0.81703705, 0.81815314, 0.82307839, 0.81990004, 0.82897419,\n",
       "        0.82506794]),\n",
       " 'split5_train_score': array([0.85503745, 0.85928088, 0.86017025, 0.86070383, 0.86189812,\n",
       "        0.86100876]),\n",
       " 'split6_train_score': array([0.85886276, 0.85874015, 0.86043203, 0.85900986, 0.86143738,\n",
       "        0.86445332]),\n",
       " 'split7_train_score': array([0.85006166, 0.85459077, 0.85753465, 0.8522507 , 0.85514432,\n",
       "        0.85469139]),\n",
       " 'split8_train_score': array([0.79137856, 0.79369199, 0.79783052, 0.79078734, 0.80022109,\n",
       "        0.79651958]),\n",
       " 'split9_train_score': array([0.81674594, 0.81584823, 0.82601416, 0.82657218, 0.81965739,\n",
       "        0.81849283]),\n",
       " 'mean_train_score': array([0.83467994, 0.8375415 , 0.84041232, 0.83929899, 0.84052646,\n",
       "        0.84089999]),\n",
       " 'std_train_score': array([0.02655761, 0.02689033, 0.02507036, 0.02602125, 0.0262549 ,\n",
       "        0.02745111])}"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pickle\n",
    "\n",
    "# Open a file and use dump()\n",
    "with open('./cv_results/Brady_ai.19x19.pickle', 'wb') as file:\n",
    "    # A new file will be created\n",
    "    pickle.dump(results, file)\n",
    "results#['mean_test_score']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c4dc74d",
   "metadata": {},
   "source": [
    "## Show SpCV geographic locations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "686fb0eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "f, axarr = plt.subplots(1,2)\n",
    "rSpCV.folding.plot('Fold', ax=axarr[0], markersize=3)\n",
    "rSpCV.folding.plot('z', ax=axarr[1], markersize=3)\n",
    "plt.show()\n",
    "\n",
    "# Pull next cross-validation training and test sets\n",
    "tr, ts = next(cv)\n",
    "rSpCV.folding.iloc[tr].plot('z') # Plot training set using geographical coordinates"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "334c609c",
   "metadata": {},
   "source": [
    "### [Optional] Testing multidimensional image rotation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b789db19",
   "metadata": {},
   "outputs": [],
   "source": [
    "from skimage.transform import rotate\n",
    "my_img = X[2]\n",
    "print(my_img.shape)\n",
    "pyplot.imshow(my_img[:,:, 1])\n",
    "pyplot.show()\n",
    "f, axarr = pyplot.subplots(1,2)\n",
    "axarr[0].imshow(rotate(my_img, angle=15*np.random.randint(6), center=(2,2), mode='symmetric')[:,:, 1])\n",
    "axarr[1].imshow(rotate(my_img, angle=15*np.random.randint(6), center=(2,2), mode='symmetric')[:,:, 1])\n",
    "pyplot.show()\n",
    "my_img.shape\n",
    "f, axarr = pyplot.subplots(1,2)\n",
    "axarr[0].imshow(rotate(my_img, angle=15*np.random.randint(6), mode='symmetric')[:,:, 1])\n",
    "axarr[1].imshow(rotate(my_img, angle=15*np.random.randint(6), mode='symmetric')[:,:, 1])\n",
    "pyplot.show()\n",
    "my_img.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "b6846ae3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "21980"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import gc\n",
    "gc.collect()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4753f187",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "import keras.backend as K\n",
    "K.clear_session()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e097d204",
   "metadata": {},
   "outputs": [],
   "source": [
    "from numba import cuda\n",
    "cuda.select_device(0)\n",
    "cuda.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2a4b116e",
   "metadata": {},
   "outputs": [],
   "source": [
    "!python --version\n",
    "!conda env list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "29b120d7",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "1ebd2f51",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'mean_fit_time': array([249.87746546, 316.64506078, 407.90692806, 463.57474768,\n",
       "        524.53797669, 573.91162128]),\n",
       " 'std_fit_time': array([ 5.33187764,  8.91929358, 10.710281  , 13.00723327, 10.31825273,\n",
       "        16.522486  ]),\n",
       " 'mean_score_time': array([3.27026525, 3.76689994, 4.73975282, 5.40280876, 6.29650459,\n",
       "        6.21310711]),\n",
       " 'std_score_time': array([0.2597956 , 0.55226342, 0.52945718, 0.69218202, 0.71210138,\n",
       "        0.61519397]),\n",
       " 'param_internal_size': masked_array(data=[3, 5, 7, 9, 11, 13],\n",
       "              mask=[False, False, False, False, False, False],\n",
       "        fill_value='?',\n",
       "             dtype=object),\n",
       " 'params': [{'internal_size': 3},\n",
       "  {'internal_size': 5},\n",
       "  {'internal_size': 7},\n",
       "  {'internal_size': 9},\n",
       "  {'internal_size': 11},\n",
       "  {'internal_size': 13}],\n",
       " 'split0_test_score': array([0.76204789, 0.75706905, 0.75998122, 0.76110852, 0.75988728,\n",
       "        0.75979334]),\n",
       " 'split1_test_score': array([0.64999455, 0.66464144, 0.66442442, 0.63936204, 0.66268849,\n",
       "        0.66908973]),\n",
       " 'split2_test_score': array([0.71239156, 0.70927173, 0.70780933, 0.70741934, 0.71541387,\n",
       "        0.712879  ]),\n",
       " 'split3_test_score': array([0.97476798, 0.97639   , 0.97494817, 0.95287013, 0.95881772,\n",
       "        0.95413172]),\n",
       " 'split4_test_score': array([0.92144811, 0.92235881, 0.93943536, 0.91996813, 0.92235881,\n",
       "        0.92133427]),\n",
       " 'split5_test_score': array([0.75509632, 0.75688118, 0.75565994, 0.7536872 , 0.72437763,\n",
       "        0.73997182]),\n",
       " 'split6_test_score': array([0.65737224, 0.64880115, 0.66008461, 0.66789627, 0.65997612,\n",
       "        0.67993927]),\n",
       " 'split7_test_score': array([0.6840207 , 0.69961977, 0.70449448, 0.69357514, 0.70829678,\n",
       "        0.70693183]),\n",
       " 'split8_test_score': array([0.9714337 , 0.95611429, 0.96512568, 0.94899523, 0.96089035,\n",
       "        0.9643147 ]),\n",
       " 'split9_test_score': array([0.91905737, 0.94467211, 0.92930329, 0.92076504, 0.9248634 ,\n",
       "        0.94091529]),\n",
       " 'mean_test_score': array([0.80076304, 0.80358195, 0.80612665, 0.7965647 , 0.79975705,\n",
       "        0.8049301 ]),\n",
       " 'std_test_score': array([0.12501172, 0.12427857, 0.12361415, 0.11884368, 0.11959261,\n",
       "        0.11752266]),\n",
       " 'rank_test_score': array([4, 3, 1, 6, 5, 2], dtype=int32),\n",
       " 'split0_train_score': array([0.8488121 , 0.8587473 , 0.85491043, 0.856435  , 0.85780716,\n",
       "        0.862203  ]),\n",
       " 'split1_train_score': array([0.85633719, 0.85918152, 0.85876471, 0.85918152, 0.86246723,\n",
       "        0.86205035]),\n",
       " 'split2_train_score': array([0.86161083, 0.86153537, 0.86596382, 0.86664319, 0.86445409,\n",
       "        0.86840451]),\n",
       " 'split3_train_score': array([0.79091585, 0.79564559, 0.79942423, 0.80150628, 0.79320359,\n",
       "        0.79610825]),\n",
       " 'split4_train_score': array([0.81703705, 0.81815314, 0.82307839, 0.81990004, 0.82897419,\n",
       "        0.82506794]),\n",
       " 'split5_train_score': array([0.85503745, 0.85928088, 0.86017025, 0.86070383, 0.86189812,\n",
       "        0.86100876]),\n",
       " 'split6_train_score': array([0.85886276, 0.85874015, 0.86043203, 0.85900986, 0.86143738,\n",
       "        0.86445332]),\n",
       " 'split7_train_score': array([0.85006166, 0.85459077, 0.85753465, 0.8522507 , 0.85514432,\n",
       "        0.85469139]),\n",
       " 'split8_train_score': array([0.79137856, 0.79369199, 0.79783052, 0.79078734, 0.80022109,\n",
       "        0.79651958]),\n",
       " 'split9_train_score': array([0.81674594, 0.81584823, 0.82601416, 0.82657218, 0.81965739,\n",
       "        0.81849283]),\n",
       " 'mean_train_score': array([0.83467994, 0.8375415 , 0.84041232, 0.83929899, 0.84052646,\n",
       "        0.84089999]),\n",
       " 'std_train_score': array([0.02655761, 0.02689033, 0.02507036, 0.02602125, 0.0262549 ,\n",
       "        0.02745111])}"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results#['mean_test_score']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "ecca1e4c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Name: /physical_device:GPU:0   Type: GPU\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "\n",
    "gpus = tf.config.list_physical_devices('GPU')\n",
    "for gpu in gpus:\n",
    "    print(\"Name:\", gpu.name, \"  Type:\", gpu.device_type)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "20341542",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(gpus)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
